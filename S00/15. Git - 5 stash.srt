1
00:00:01,000 --> 00:00:03,000
이 비디오는 git stash에 관한 내용입니다

2
00:00:03,000 --> 00:00:10,000
git stash는 편집 내용을 따로 보관해 줍니다

3
00:00:10,000 --> 00:00:14,000
작업 중에 급히 다른 일을 해야 할 때 말이죠

4
00:00:14,000 --> 00:00:20,000
이 기능은 초미세 branch들을 생성한다고 할 수 있습니다

5
00:00:20,000 --> 00:00:24,000
그렇게 함으로써 여러분은 다른 작업을 위해 git을 빠르게 정리하고

6
00:00:24,000 --> 00:00:25,000
돌아올 수 있습니다

7
00:00:25,000 --> 00:00:28,000
예를 들어볼게요

8
00:00:28,000 --> 00:00:32,000
저는 현재 master branch에 있고

9
00:00:32,000 --> 00:00:36,000
딱히 작업할 만한 게 아무것도 없습니다

10
00:00:36,000 --> 00:00:40,000
dev branch로 가서

11
00:00:40,000 --> 00:00:42,000
아무거나 편집해 봅시다

12
00:00:42,000 --> 00:00:45,000
예를 들어 toto를

13
00:00:45,000 --> 00:00:48,000
loliloli로 수정해봅시다

14
00:00:48,000 --> 00:00:51,000
이제 toto는 로컬에서 수정되었습니다

15
00:00:51,000 --> 00:00:56,000
dev branch에서 저는 지금 commit 하고 싶지 않은데

16
00:00:56,000 --> 00:00:59,000
바로 master branch에 작업하러 가야 합니다

17
00:00:59,000 --> 00:01:03,000
git checkout master을 통해 master branch로 이동합니다
여기에서는 운이 좋네요

18
00:01:03,000 --> 00:01:10,000
toto는 수정되지 않았기 때문에 서로 간에 이동할 수 있었습니다

19
00:01:10,000 --> 00:01:14,000
commit을 하기 위해 master branch로 갑니다

20
00:01:14,000 --> 00:01:25,000
git add toto를 하고
commit -m 명령어로 "toto to loliloli"라는 메시지를 작성합니다

21
00:01:25,000 --> 00:01:29,000
그리고 master branch에서 dev branch로 돌아갑니다

22
00:01:29,000 --> 00:01:36,000
toto file을 다시 열어 'lolilolo'로 수정합니다

23
00:01:36,000 --> 00:01:40,000
이제 제 toto 파일은 편집되었습니다

24
00:01:40,000 --> 00:01:47,000
git checkout master를 입력하니 이번에는 문제가 있다고 하네요

25
00:01:47,000 --> 00:01:50,000
로컬에서의 변경 사항이 master branch로 돌아가는 것과 호환되지 않습니다

26
00:01:50,000 --> 00:01:52,000
여기 차이점을 봅시다

27
00:01:52,000 --> 00:01:56,000
저번에는 dev와 master branch 사이의 차이점을 찾지 못했습니다, 좋아요

28
00:01:56,000 --> 00:01:59,000
하지만 여기에서는 문제가 있습니다

29
00:01:59,000 --> 00:02:03,000
저는 로컬에서 편집했고 여전히 dev branch 상에 있지만
master branch로 가기를 거부합니다

30
00:02:03,000 --> 00:02:08,000
하지만 버그를 수정하기 위해서는 master branch로 가서
pouet 파일을 편집해야 합니다

31
00:02:08,000 --> 00:02:10,000
이 작업은 정말 중요합니다

32
00:02:10,000 --> 00:02:14,000
저는 지금 바로 dev branch에 commit하고 싶지 않습니다
좋지 않은 생각이에요

33
00:02:14,000 --> 00:02:15,000
그래서 git stash를 합니다

34
00:02:15,000 --> 00:02:22,000
간단히 말해서 git stash는 폴더의 모든 변경 사항들을 가져와서

35
00:02:22,000 --> 00:02:28,000
빠르게 작은 commit을 생성하고 옆에 치워놓습니다

36
00:02:28,000 --> 00:02:37,000
git stash list로 우리는 무언가가 포함된 commit을 볼 수 있습니다

37
00:02:37,000 --> 00:02:41,000
이제 master branch로 갑시다, 오케이, 잘 도착했어요

38
00:02:41,000 --> 00:02:43,000
dev branch로 돌아옵니다

39
00:02:43,000 --> 00:02:52,000
웁쓰 미안해요, 이제 dev branch로 돌아와서,
git stash한 내용을 다시 적용할 수 있습니다

40
00:02:52,000 --> 00:02:58,000
예를 들어 git stash pop을 하면,
이 간단한 commit의 편집 내용을 파일에 다시 적용합니다

41
00:02:58,000 --> 00:03:06,000
dev branch를 업데이트 할 수 있죠, 그리고 다음과 같이

42
00:03:06,000 --> 00:03:14,000
git rebase master를 해봅시다

43
00:03:14,000 --> 00:03:17,000
로컬에서 편집한 적이 없었기 때문에
fast forward dev to master라는 문구에서 보시다시피

44
00:03:17,000 --> 00:03:20,000
한 곳에서 다른 곳으로 쉽게 이동할 수 있습니다

45
00:03:20,000 --> 00:03:22,000
dev와 master branch는 이미 좋은 상태에 있네요

46
00:03:22,000 --> 00:03:25,000
이제 toto의 최신 편집을 추가하고

47
00:03:25,000 --> 00:03:30,000
git stash pop을 합니다

48
00:03:30,000 --> 00:03:36,000
문제가 발견되었습니다, toto는 stash에서 편집되었다고 경고하네요

49
00:03:36,000 --> 00:03:41,000
이것이 stash의 강력한 기능입니다
빠르게 저장하고 옆에 잠시 치워놓는 것 말이죠

50
00:03:41,000 --> 00:03:45,000
주된 단점은 만약 stash 한 와중에 무언가를 변경한다면

51
00:03:45,000 --> 00:03:52,000
stash는 실제 commit이 아니고
여러분은 현재 branch status의 중간에 있지 않습니다

52
00:03:52,000 --> 00:03:55,000
여러분은 dev branch에 있고 과정을 rebase 하고 있지 않기 때문에

53
00:03:55,000 --> 00:03:57,000
이미 진행된 것들을 중단할 수 없습니다

54
00:03:57,000 --> 00:04:01,000
git stash list에 가보면 아직 여기 남아있습니다

55
00:04:01,000 --> 00:04:06,000
이게 문제입니다, merge가 제대로 되지 않았어요

56
00:04:06,000 --> 00:04:13,000
git stash로 치워놨던 변경 사항이 아직 꺼내지지 않았다는 걸 볼 수 있습니다

57
00:04:13,000 --> 00:04:22,000
toto를 수정했어요

58
00:04:22,000 --> 00:04:27,000
저는 지금 merge paths의 중간에 와 있습니다

59
00:04:27,000 --> 00:04:31,000
merge를 하려면 파일을 추가해서 commit을 하거나

60
00:04:31,000 --> 00:04:34,000
파일에 git reset HEAD를 적용해야 합니다

61
00:04:34,000 --> 00:04:37,000
이 경우에 파일은 편집되었다고 말할 수 있고

62
00:04:37,000 --> 00:04:40,000
원래대로 작업에 복귀할 수 있습니다

63
00:04:40,000 --> 00:04:45,000
git stash list를 입력하니 여전히 저기에 있는걸 볼 수 있습니다

64
00:04:45,000 --> 00:04:52,000
이제 이 옵션을 사용할 때가 왔습니다, 이게 무엇인지 살펴봅시다

65
00:04:52,000 --> 00:05:02,000
git stash drop이에요, 간단하죠

66
00:05:02,000 --> 00:05:06,000
이제 이렇게 내용물을 빼냈습니다

67
00:05:06,000 --> 00:05:10,000
보시다시피 git stash list는 이제 아무것도 반환하지 않습니다

68
00:05:10,000 --> 00:05:15,000
또 다른 git stash에서 toto 편집본을 저장합니다

69
00:05:15,000 --> 00:05:19,000
이제 git stash list를 하면 새로운 것이 반환됩니다

70
00:05:19,000 --> 00:05:26,000
git stash pop을 하고 git stash list를 하면

71
00:05:26,000 --> 00:05:32,000
버려진 것을 볼 수 있습니다

72
00:05:32,000 --> 00:05:34,000
stash는 수정 사항을 저장하고 편집 내용을 옆으로 치워놓거나

73
00:05:34,000 --> 00:05:37,000
다시 되돌릴 수 있는 간단한 도구입니다

74
00:05:37,000 --> 00:05:40,000
다만 이것은 실제 commit이 아니기 때문에 위험합니다

75
00:05:40,000 --> 00:05:44,000
순식간에 혼란스러워질 수 있어요

76
00:05:44,000 --> 00:05:48,000
하지만 빠르게 앞뒤로 갈 수 있는 장점이 있습니다

77
00:05:48,000 --> 00:05:54,000
예를 들어 로컬에서 편집한 것을 잃지 않고 또 다른 branch에서 작업하면서

78
00:05:54,000 --> 00:05:57,000
commit을 만들고 고칠 수 있습니다

79
00:05:57,000 --> 00:06:00,000
이 모든 것은 여러분에게 달려있죠, git stash는 강력합니다

80
00:06:00,000 --> 00:06:08,000
git stash는 다른 도구들만큼 위험합니다

81
00:06:08,000 --> 00:06:11,000
몇 초 만에 여러분의 폴더와 git을 정리할 수 있죠

82
00:06:11,000 --> 00:59:59,000
branch를 바꾸고 다른 일을 하기 위해서 말이에요

<< translated by mki, mseo, inyang, ji-kim, and yeslee :) >>
