1
00:00:01,000 --> 00:00:04,000
이번 영상에서는 merge와 rebase에 대한 내용입니다.

2
00:00:04,000 --> 00:00:12,000
이 두 가지 강력한 도구들은 다른 branch를 이용해서 local branch를 업데이트하도록 도와주며,

3
00:00:12,000 --> 00:00:20,000
merge commit을 만들고 충돌이 없는지 확인합니다.

4
00:00:20,000 --> 00:00:25,000
이게 git에서 가장 빛나는 기능입니다.

5
00:00:25,000 --> 00:00:28,000
이 두 가지 명령어들은 같은 최종 결과물을 만들어냅니다.

6
00:00:28,000 --> 00:00:35,000
두 개의 독립적인 branch가 있고, 이것들을 한 개의 branch로 합칠 것입니다.

7
00:00:35,000 --> 00:00:49,000
그러면 기록은 연속적으로 유지될 겁니다. 이 기능들을 보는 가장 좋은 방법은 역시 예시죠?

8
00:00:49,000 --> 00:01:00,000
다시 한 번 하면, 제 git이 있고, pouet과 master branch가 있습니다.

9
00:01:00,000 --> 00:01:04,000
branch 이름을 바꿀 겁니다. 왜냐면, 같은 이름의 파일이 있기 때문이죠.

10
00:01:04,000 --> 00:01:09,000
dev라는 이름의 새로운 branch를 바로 만들고, 

11
00:01:09,000 --> 00:01:13,000
pouet branch를 지웁니다.

12
00:01:13,000 --> 00:01:16,000
자, dev를 만들었고, pouet을 지웠습니다.

13
00:01:16,000 --> 00:01:20,000
I check and I see dev and master
확인해보면, dev와 master가 있는 것을 확인할 수 있습니다.

14
00:01:20,000 --> 00:01:26,000
그리고 현재 dev branch에 있습니다.

15
00:01:26,000 --> 00:01:32,000
dev에서 toto라는 파일을 만들어 보고,

16
00:01:32,000 --> 00:01:37,000
안에다가 lol을 적습니다.

17
00:01:37,000 --> 00:01:40,000
이제 확인되지 않은 파일인 toto가 있고, 이걸 추가한 뒤에,

18
00:01:40,000 --> 00:01:44,000
toto를 commit합시다.

19
00:01:44,000 --> 00:01:50,000
이 commit은 “toto added”라고 부릅시다.

20
00:01:50,000 --> 00:01:54,000
이건 dev branch에 있는 commit입니다.

21
00:01:54,000 --> 00:02:00,000
현재 master branch에 있지 않고, toto 파일은 dev branch에 있습니다.

22
00:02:00,000 --> 00:02:04,000
그리고 pouet 파일의 내용을

23
00:02:04,000 --> 00:02:12,000
18로 수정하고

24
00:02:12,000 --> 00:02:16,000
git commit을 합시다. 먼저, add pouet을 하고,

25
00:02:16,000 --> 00:02:21,000
git commit -m “pouet to 18”을 합시다.

26
00:02:21,000 --> 00:02:30,000
그리고 이제 만약 git log를 하면, 현재 dev 위에 제가 있고, master branch는 2 commit 뒤에 있습니다.

27
00:02:30,000 --> 00:02:32,000
이제 master branch로 가봅시다.

28
00:02:32,000 --> 00:02:36,000
자 checkout master를 합시다.

29
00:02:36,000 --> 00:02:42,000
저는 master branch에 있고, 오직 2개의 commit만 있는 것을 볼 수 있고,

30
00:02:42,000 --> 00:02:44,000
이제 새로운 commit을 만들 겁니다.

31
00:02:44,000 --> 00:02:54,000
그냥 pouet의 내용을 4로 변경하고,

32
00:02:54,000 --> 00:03:06,000
이제 “pouet to 4”라는 이름으로 새로운 commit을 만듭시다.

33
00:03:06,000 --> 00:03:15,000
자 이제 저는 master branch에 있고, git log로 어떻게 생겼는지 볼 수 있습니다.

34
00:03:15,000 --> 00:03:21,000
그리고, 만약 git log dev를 하면, dev의 commit들을 볼 수 있습니다.

35
00:03:21,000 --> 00:03:25,000
보시다시피 같지 않지만, 공통된 부분이 있습니다.

36
00:03:25,000 --> 00:03:29,000
the ca4a is common to both
ca4a가 양쪽에 공통으로 있고,

37
00:03:29,000 --> 00:03:33,000
이후 commit에는 차이점이 있군요.

38
00:03:33,000 --> 00:03:40,000
먼저, dev branch를 업데이트하고 싶습니다. 이제 우리가 시작할 지점입니다.

39
00:03:40,000 --> 00:03:52,000
자, dev branch로 가서, 아차차.. 좋아요...

40
00:03:52,000 --> 00:03:56,000
이제 dev branch를 업데이트하고 싶어요

41
00:03:56,000 --> 00:04:00,000
dev branch를 master branch 위로 보낼 건데, 그러기 전에

42
00:04:00,000 --> 00:04:02,000
dev 뒤에 있는 master로부터 기록을 받아야 합니다.

43
00:04:02,000 --> 00:04:04,000
이걸 위해 rebase 명령어가 있습니다.

44
00:04:04,000 --> 00:04:10,000
man rebase를 하면, 아주 좋은 예제가 여기 있습니다.

45
00:04:13,000 --> 00:04:16,000
이게 dev branch이고, 이건 master branch입니다.

46
00:04:16,000 --> 00:04:20,000
다른 commit들을 가지고 있고, 하나의 공통된 commit이 있습니다.

47
00:04:20,000 --> 00:04:26,000
그래서 만약, git rebase master를 하면, 목표는 여기에 도착하는 것입니다.

48
00:04:26,000 --> 00:04:32,000
rebase가 하는 것은, master로 가서 공통된 시작점으로 간 뒤에,

49
00:04:32,000 --> 00:04:40,000
여기 보이는 것처럼 A’ B’ C’와 같이 commit들을 다시 적용하는 것입니다.

50
00:04:40,000 --> 00:04:48,000
그리고 뭐가 일어날지 한번 봅시다.

51
00:04:48,000 --> 00:04:54,000
git rebase master, 저는 현재 dev branch에 있습니다.

52
00:04:54,000 --> 00:04:58,000
자, dev branch에서 rebase를 요청할 겁니다.

53
00:04:58,000 --> 00:05:01,000
현 branch의 시작 지점을 찾은 뒤에,

54
00:05:01,000 --> 00:05:04,000
시작점 이후에 했던 모든 commit은 잠시 보관해두고

55
00:05:04,000 --> 00:05:09,000
master branch의 모든 커밋들을 업데이트한 다음에, 아까 dev에서 보관해둔 커밋들을 이어 붙입니다

56
00:05:09,000 --> 00:05:11,000
이게 rebase가 하는 것입니다.

57
00:05:11,000 --> 00:05:15,000
좋아요, toto를 적용하는 것을 성공했습니다.

58
00:05:15,000 --> 00:05:24,000
왜냐구요? master부터 시작해서 toto commit을 적용할 수 있는지 확인하기 때문입니다.

59
00:05:24,000 --> 00:05:27,000
toto commit은 toto file을 추가한 곳이고,

60
00:05:27,000 --> 00:05:30,000
이걸 하기에 아무런 충돌이 없었습니다.

61
00:05:30,000 --> 00:05:33,000
여기 pouet을 시도했는데, 잠시만요 문제가 있습니다.

62
00:05:33,000 --> 00:05:37,000
한 commit이 pouet을 변경했고, 다른 commit도 pouet을 변경했습니다.

63
00:05:37,000 --> 00:05:44,000
게다가 같은 라인에서 변경해서, 변경된 것들을 자동으로 merge 할 수 없습니다.

64
00:05:44,000 --> 00:05:48,000
만약 파일의 다른 지점에서 라인이 달랐다면,

65
00:05:48,000 --> 00:05:51,000
파일을 자동으로 merge 할 수 있었을 겁니다. 그런데 여기는 라인이 같습니다.

66
00:05:51,000 --> 00:05:54,000
그리고 문제가 있다고 오류를 출력할 겁니다.

67
00:05:54,000 --> 00:05:57,000
지금 매우 특이한 상황에 있습니다.

68
00:05:57,000 --> 00:06:00,000
보시다시피 충돌이 발생했고, merge 하는데 실패했습니다.

69
00:06:00,000 --> 00:06:04,000
그래서 현재 rebase의 중간지점에 있습니다.

70
00:06:04,000 --> 00:06:07,000
‘git status’ 명령으로 ‘rebase in progress’를 확인할 수 있으며,

71
00:06:07,000 --> 00:06:13,000
현재 dev branch에서 rebase 중이라는 뜻입니다.

72
00:06:13,000 --> 00:06:17,000
이 명령은 이번 commit인 pouet 18을 취소할 수 있게 해줍니다.

73
00:06:17,000 --> 00:06:24,000
그 뜻은, 현재 branch에서 pouet to 18 commit을

74
00:06:24,000 --> 00:06:27,000
하지 말라는 뜻이고,

75
00:06:27,000 --> 00:06:31,000
이 명령은, 중단한 뒤에 모든 것을 취소하고

76
00:06:31,000 --> 00:06:36,000
우리가 있던 곳으로 돌아간 뒤에

77
00:06:36,000 --> 00:06:39,000
문제를 해결하고 다시 rebase 하겠다는 뜻입니다.

78
00:06:39,000 --> 00:06:41,000
여기에 문제가 있는 수정된 파일들이 있습니다.

79
00:06:41,000 --> 00:06:45,000
이번 경우에는 pouet이고,

80
00:06:45,000 --> 00:06:47,000
만약 이 파일을 열면,

81
00:06:47,000 --> 00:06:55,000
여러분들은 ====과 >>>>를 볼 수 있습니다. 이 부분이 merge에 실패한 곳입니다.

82
00:06:55,000 --> 00:07:02,000
우리가 rebase 하려고 했던 것은 4 부분이고,

83
00:07:02,000 --> 00:07:05,000
위에 넣으려고 했던 것은 18인 부분입니다.

84
00:07:05,000 --> 00:07:08,000
그래서 이제 어떤 것이 올바른 것인지

85
00:07:08,000 --> 00:07:11,000
결정해야 합니다.

86
00:07:11,000 --> 00:07:16,000
git은 이걸 할 수 없음으로, 우리가 다뤄야 할 작업입니다.

87
00:07:16,000 --> 00:07:20,000
이번 경우에는 18이 맞았다고 합시다.

88
00:07:20,000 --> 00:07:30,000
그러나 이번에는 19로 바꿀 겁니다. 왜냐하면 18이 옳은 값이라는 것을 알기 때문입니다.

89
00:07:30,000 --> 00:07:35,000
‘git status’로 아무것도 일어나지 않는 것을 볼 수 있습니다.

90
00:07:35,000 --> 00:07:41,000
git에서 rebase한 뒤에 직접 pouet을 수정했습니다.

91
00:07:41,000 --> 00:07:47,000
‘git add pouet’하면… 좋습니다. 

92
00:07:47,000 --> 00:07:51,000
지금까지 한 것은, 문제가 있는 commit을 다시 열고,

93
00:07:51,000 --> 00:07:55,000
새로운 값으로 변경한 뒤에 다시 닫은 겁니다.

94
00:07:55,000 --> 00:07:58,000
이제 수정된 pouet을 볼 수 있으며, 아무런 문제가 없습니다.

95
00:07:58,000 --> 00:08:04,000
now I can fix my rebase, it will close the commit
이제 rebase를 고칠 수 있고, commit을 끝낼 겁니다

96
00:08:04,000 --> 00:08:11,000
그리고 다음 commit을 계속할 수 있습니다.

97
00:08:11,000 --> 00:08:17,000
‘git log’ 하면, 현재 dev branch에 있고,

98
00:08:17,000 --> 00:08:20,000
보시다시피 master branch는 기록에 있습니다.

99
00:08:20,000 --> 00:08:25,000
rebase를 함으로서, 같은 시점을 찾았고, (이거요)

100
00:08:25,000 --> 00:08:29,000
master의 끝으로 가서, 이 commit들을 적용했습니다.

101
00:08:29,000 --> 00:08:35,000
만약 자세하게 보고 싶으시면... 50f7가 보이죠?

102
00:08:35,000 --> 00:08:39,000
이전으로 되돌아가 보면, toto added는 ea644이었습니다

103
00:08:39,000 --> 00:08:46,000
왜냐하면 이 커밋(50f7)은 여기서(ea644) 왔지만

104
00:08:46,000 --> 00:08:50,000
그 전에, 여기(ca4ea)서 왔고

105
00:08:50,000 --> 00:08:52,000
그것들은 다르기 때문에, 새롭게 커밋한겁니다

106
00:08:52,000 --> 00:08:54,000
달리 말해, 그들은 같은 커밋이 아닙니다

107
00:08:54,000 --> 00:08:57,000
같은 일을 한다고 하더라도

108
00:08:57,000 --> 00:09:01,000
단지 같은 장소에 연결되어 있지 않고, 고로 다른 ID를 갖습니다 

109
00:09:01,000 --> 00:09:05,000
여기 현재 의미 없는 pouet to 18이 있습니다

110
00:09:05,000 --> 00:09:09,000
왜냐하면 지금은 19이기 때문이죠

111
00:09:09,000 --> 00:09:14,000
커밋 이름을 바꿀 방법이 있습니다

112
00:09:14,000 --> 00:09:18,000
조심해야 해요, 강력하고 위험한 도구입니다

113
00:09:18,000 --> 00:09:23,000
git commit --amend로 pouet to 19를 입력합니다

114
00:09:23,000 --> 00:09:33,000
원래 적용되어야 하지만, 이 컴퓨터에는 문제가 있어, 되지 않았습니다

115
00:09:33,000 --> 00:09:43,000
git commit --amend -m “pouet to 19”를 입력합니다

116
00:09:43,000 --> 00:09:48,000
제대로 됐고, 단지 이름을 바꿨습니다, 문제없어요

117
00:09:48,000 --> 00:09:54,000
이제 rebase에 대해 배웠습니다

118
00:09:54,000 --> 00:09:56,000
제 브랜치 아래 또 다른 브랜치를 가져와

119
00:09:56,000 --> 00:09:58,000
모든 커밋의 상단에 넣어

120
00:09:58,000 --> 00:10:01,000
발생하는 문제를 해결하고 싶었습니다

121
00:10:01,000 --> 00:10:04,000
이제 또 다른 명령어, git merge를 봅시다

122
00:10:04,000 --> 00:10:07,000
git merge는 정확하게 같은 건 아닙니다

123
00:10:07,000 --> 00:10:11,000
여기 보시죠

124
00:10:11,000 --> 00:10:17,000
이 브랜치의 모든 커밋들과 그 차이들을 가지고와

125
00:10:17,000 --> 00:10:20,000
내 브랜치에 모든 커밋들을 넣을 merge 커밋을 만들고 싶습니다

126
00:10:26,000 --> 00:10:30,000
아래에 넣는 대신에 위에 넣고 싶습니다

127
00:10:30,000 --> 00:10:34,000
여러분이 본 것처럼, dev (브랜치)에서는 rebase를 했었습니다

128
00:10:34,000 --> 00:10:39,000
master 브랜치에서 새 브랜치를 추가할 것입니다

129
00:10:39,000 --> 00:10:46,000
master 브랜치로 가서

130
00:10:46,000 --> 00:10:52,000
dev 브랜치와 merge를 한 동작을

131
00:10:52,000 --> 00:10:56,000
git log로 보면,

132
00:10:56,000 --> 00:11:01,000
merge 커밋을 갖고 있지 않습니다

133
00:11:01,000 --> 00:11:06,000
왜일까요? dev 브랜치는 뷰(시점)의 이전 지점으로부터 master 브랜치를 따라가기 때문입니다

134
00:11:06,000 --> 00:11:12,000
그래서 그 커밋을 가져와 뒤에 넣었습니다

135
00:11:12,000 --> 00:11:16,000
dev 브랜치가 master 브랜치의 상단에 있지 않다고 생각해봅시다

136
00:11:16,000 --> 00:11:20,000
그러면 우리는 다시 pouet 파일을 수정해서

137
00:11:20,000 --> 00:11:23,000
20을 입력합니다

138
00:11:23,000 --> 00:11:29,000
add pouet을 하고 커밋명을 “pouet to 20”으로 합시다

139
00:11:29,000 --> 00:11:34,000
status를 확인했습니다, 좋아요

140
00:11:34,000 --> 00:11:36,000
이제 master 브랜치는 dev 브랜치와 같은 장소에 있지 않아요

141
00:11:36,000 --> 00:11:38,000
dev 브랜치에 가서

142
00:11:38,000 --> 00:11:43,000
다시, toto를 수정해

143
00:11:43,000 --> 00:11:49,000
lolilol를 입력합니다

144
00:11:49,000 --> 00:11:52,000
add toto를 하고

145
00:11:52,000 --> 00:12:00,000
커밋명을 “toto to lolilol”로 합시다

146
00:12:00,000 --> 00:12:08,000
git log를 보면, toto는 dev 브랜치에서 lolilol로 바뀌었습니다

147
00:12:08,000 --> 00:12:16,000
master	 브랜치의 git log를 보면, pouet to 20으로 같은 값을 가지고 있지 않습니다,

148
00:12:16,000 --> 00:12:18,000
저는 같은 장소에 있지 않습니다

149
00:12:18,000 --> 00:12:22,000
master 브랜치로 다시 돌아가

150
00:12:22,000 --> 00:12:26,000
git merge dev를 하면

151
00:12:26,000 --> 00:12:29,000
master 브랜치에 dev 브랜치를 갖고 와서, master 브랜치의 상단에는

152
00:12:29,000 --> 00:12:39,000
dev 브랜치의 merge 커밋이 생깁니다

153
00:12:39,000 --> 00:12:45,000
dev 브랜치의 모든 커밋들을 갖고 와 master 브랜치에서 그들을 merge 하려고 합니다

154
00:12:45,000 --> 00:12:50,000
다시 조그마한 문제가 생겼네요

155
00:12:50,000 --> 00:13:00,000
-m을 사용해서, vi로 어떤 걸 하는 거지만, 지금 당장은 수정하지 않을 겁니다

156
00:13:00,000 --> 00:13:06,000
하지만 문제되지는 않아요

157
00:13:06,000 --> 00:13:11,000
지금 master 브랜치에 있고

158
00:13:11,000 --> 00:13:18,000
dev 브랜치의 커밋들이 맨 위에 있습니다

159
00:13:18,000 --> 00:13:24,000
보시다시피, merge 커밋은 모든 것이 제대로 동작하리라는 보장인 거죠 

160
00:13:32,000 --> 00:13:38,000
dev 브랜치의 커밋들을 추가하고 merge 커밋을 만듭니다

161
00:13:38,000 --> 00:13:40,000
여기 간단한 예시를 보여줄게요

162
00:13:40,000 --> 00:13:44,000
문제를 만들어봅시다

163
00:13:44,000 --> 00:13:54,000
pouet을 수정하고 넣습니다, 미안합니다, 이걸 하기 전에

164
00:13:54,000 --> 00:14:14,000
rebase master를 하면, git은 아무 문제 없습니다

165
00:14:14,000 --> 00:14:18,000
다시 시작해보면,

166
00:14:18,000 --> 00:14:23,000
pouet에 24로 바꿔 넣었습니다

167
00:14:23,000 --> 00:14:30,000
add하고 “pouet to 24”라는 이름으로 commit 합니다

168
00:14:30,000 --> 00:14:37,000
이 비디오가 정말 길지만 모든 걸 보여주기 위해 중요하다고 생각합니다

169
00:14:37,000 --> 00:14:41,000
저는 dev 브랜치에 있어요, 좋아요

170
00:14:41,000 --> 00:14:50,000
master 브랜치로 돌아와서, pouet에 또 다른 값을 넣고, pouet to 29라는 이름으로 commit 합니다

171
00:14:59,000 --> 00:15:05,000
master	브랜치에서 git merge dev를 합니다

172
00:15:05,000 --> 00:15:09,000
rebase에서처럼 충돌이 났네요

173
00:15:12,000 --> 00:15:17,000
문제가 생겼을 때 git status를 항상 사용합니다

174
00:15:17,000 --> 00:15:20,000
현재 merge에서 충돌이 났다고 합니다

175
00:15:20,000 --> 00:15:24,000
그래서 merge 커밋을 중단하거나 계속할지 결정할 수 있습니다

176
00:15:28,000 --> 00:15:32,000
평소처럼, pouet 파일은 양쪽에서 수정되었습니다

177
00:15:32,000 --> 00:15:36,000
master 브랜치가 main이라는 걸 볼 수 있습니다

178
00:15:36,000 --> 00:15:42,000
merge는 제가 있는 branch에서 시작하고,

179
00:15:42,000 --> 00:15:45,000
rebase는 제가 rebase를 하고 싶은 곳이 main이 된다는 겁니다

180
00:15:45,000 --> 00:15:48,000
여기 HEAD는 master 브랜치고, dev브랜치에는 24가 있습니다

181
00:15:48,000 --> 00:15:52,000
master 브랜치가 맞다고 해봅시다

182
00:15:52,000 --> 00:16:00,000
잠깐 멈추고 또 다르게 수정해봅시다

183
00:16:00,000 --> 00:16:03,000
또 다르게 수정해도 상관없습니다

184
00:16:03,000 --> 00:16:06,000
add pouet을 하고

185
00:16:06,000 --> 00:16:10,000
git status를 하면 git commit이 필요하다고 알려줍니다

186
00:16:10,000 --> 00:16:18,000
이번에는 “pouet to 30”이라고 해봅시다

187
00:16:18,000 --> 00:16:26,000
git status하고 git log를 보면 pouet to 24를 볼 수 있습니다

188
00:16:26,000 --> 00:16:28,000
pouet to 29도 리스트에 있습니다

189
00:16:28,000 --> 00:16:34,000
하지만 정확히 말하면, 그것들은 실제로는 연속적이지 않습니다

190
00:16:34,000 --> 00:16:36,000
사실 여러분은 dev 브랜치를 상단에 추가했습니다

191
00:16:36,000 --> 00:16:40,000
이로 인해 제 브랜치의 상단에 차이점이 생겼고

192
00:16:40,000 --> 00:16:44,000
두 브랜치를 통합한 커밋이 이 것(pouet to 30)입니다

193
00:16:44,000 --> 00:16:48,000
여기 dev 브랜치는

194
00:16:48,000 --> 00:16:50,000
pouet이 변경된 커밋과, pouet이 변경된 또 다른 커밋을 갖고 있고 

195
00:16:50,000 --> 00:16:54,000
어떻게 동작하는지 볼 수 있습니다.

196
00:16:54,000 --> 00:17:00,000
이 기록은 실제로 명확하지 않고, 이것이 merge 커밋입니다 

197
00:17:00,000 --> 00:17:08,000
여기에 표시되고 merge 된 다양한 커밋을 보여줍니다

198
00:17:08,000 --> 00:17:12,000
좋아요, 시간이 좀 길었다는 것을 알고 있습니다, 하지만 이제 rebase와 merge가 어떻게 동작하는지 알게 되었습니다

199
00:17:12,000 --> 00:17:14,000
한 브랜치에서 또 다른 브랜치로 이동하고

200
00:17:14,000 --> 00:17:17,000
업데이트를 하는 데 문제 없습니다

201
00:17:17,000 --> 00:59:59,000
이제 여러분들은 두 가지 강력한 도구들을 알았습니다
<< translated by inyang, ji-kim, mseo and mki, yeslee :) >>
