1
00:00:01,000 --> 00:00:04,000
이번 영상에서는 merge와 rebase에 대해 다뤄보겠습니다

2
00:00:04,000 --> 00:00:12,000
이 두 개의 강력한 도구는 다른 branch를 이용해서 local branch를 업데이트하도록 도와주며

3
00:00:12,000 --> 00:00:20,000
merge commit을 만들고 충돌이 없는지 확인합니다

4
00:00:20,000 --> 00:00:25,000
git을 빛나게 해주는 기능이죠

5
00:00:25,000 --> 00:00:28,000
이 두 개의 명령어는 같은 최종 결과물을 만들어냅니다

6
00:00:28,000 --> 00:00:35,000
두 개의 독립적인 branch가 있으며 이를 한 개의 branch로 합칠 것입니다

7
00:00:35,000 --> 00:00:49,000
기록은 연속적으로 유지되도록 말이죠, 어떻게 동작하는지 보기에 가장 좋은 방법은 역시 예시입니다

8
00:00:49,000 --> 00:01:00,000
다시 제 git이 있고 여기에는 pouet과 master이라는 branch가 있습니다

9
00:01:00,000 --> 00:01:04,000
branch 이름을 바꿀 겁니다, 같은 이름의 파일이 있기 때문이죠

10
00:01:04,000 --> 00:01:09,000
dev라는 이름의 새로운 branch를 바로 만들어 보겠습니다, 이게 더 명확하니까요

11
00:01:09,000 --> 00:01:13,000
그리고 pouet branch를 지웁니다

12
00:01:13,000 --> 00:01:16,000
dev를 만들었고 pouet을 지웠습니다

13
00:01:16,000 --> 00:01:20,000
dev와 master branch가 있는 것을 확인할 수 있습니다

14
00:01:20,000 --> 00:01:26,000
그리고 현재 저는 dev branch에 있습니다

15
00:01:26,000 --> 00:01:32,000
dev에서 toto라는 파일을 만들어서

16
00:01:32,000 --> 00:01:37,000
안에 lol을 적었습니다

17
00:01:37,000 --> 00:01:40,000
이제 untracked 상태의 파일 toto가 있죠, 이걸 추가한 뒤에

18
00:01:40,000 --> 00:01:44,000
toto를 commit합시다

19
00:01:44,000 --> 00:01:50,000
이 commit은 "toto added"라고 부릅시다

20
00:01:50,000 --> 00:01:54,000
이건 dev branch에 있는 commit입니다

21
00:01:54,000 --> 00:02:00,000
현재 저는 master branch에 있지 않고 toto 파일은 이 branch에 있습니다

22
00:02:00,000 --> 00:02:04,000
그리고 pouet 파일의 내용을

23
00:02:04,000 --> 00:02:12,000
18로 수정하고

24
00:02:12,000 --> 00:02:16,000
git commit을 합시다, 먼저 add pouet을 하고

25
00:02:16,000 --> 00:02:21,000
git commit -m "pouet to 18"을 입력합니다

26
00:02:21,000 --> 00:02:30,000
이제 git log를 해보면 현재 저는 dev branch 상에 있고 master branch는 2 commit 뒤에 있습니다

27
00:02:30,000 --> 00:02:32,000
이제 master branch로 가봅시다

28
00:02:32,000 --> 00:02:36,000
그러기 위해서 checkout master를 합니다

29
00:02:36,000 --> 00:02:42,000
저는 master branch에 있고 여기에는 오직 2개의 commit만 보이죠

30
00:02:42,000 --> 00:02:44,000
이제 새로운 commit을 만들어볼 겁니다

31
00:02:44,000 --> 00:02:54,000
pouet의 내용을 4로 수정하고

32
00:02:54,000 --> 00:03:06,000
이제 "pouet to 4"라는 이름의 새로운 commit을 만듭시다

33
00:03:06,000 --> 00:03:15,000
저는 master branch에 있고 현재 상태는 이렇습니다

34
00:03:15,000 --> 00:03:21,000
git log dev를 통해 dev의 commit들을 볼 수 있습니다

35
00:03:21,000 --> 00:03:25,000
보시다시피 똑같지는 않지만 공통된 부분이 있습니다

36
00:03:25,000 --> 00:03:29,000
the ca4a is common to both
ca4a는 양쪽에 공통으로 있는 commit이고

37
00:03:29,000 --> 00:03:33,000
이후의 commit에는 차이점이 있군요

38
00:03:33,000 --> 00:03:40,000
먼저 dev branch를 업데이트하고 싶습니다, 이것부터 시작해볼 겁니다

39
00:03:40,000 --> 00:03:52,000
우선 dev branch로 가서… 아차차, 좋아요

40
00:03:52,000 --> 00:03:56,000
이제 dev branch를 업데이트하고 싶어요

41
00:03:56,000 --> 00:04:00,000
dev branch를 master branch로 보낼 겁니다, 그러기 전에

42
00:04:00,000 --> 00:04:02,000
dev 뒤에 있는 master로부터 기록을 받아야 합니다

43
00:04:02,000 --> 00:04:04,000
이것을 위해 rebase 명령어가 있습니다

44
00:04:04,000 --> 00:04:13,000
man rebase를 해서 보여드리겠습니다, 아주 좋은 예제가 있거든요

45
00:04:13,000 --> 00:04:16,000
이게 저의 dev branch이고 이건 master branch입니다

46
00:04:16,000 --> 00:04:20,000
몇 개의 서로 다른 commit들과 하나의 공통된 commit이 있습니다

47
00:04:20,000 --> 00:04:26,000
git rebase master의 목표는 여기에 도착하는 것입니다

48
00:04:26,000 --> 00:04:32,000
rebase가 하는 것은 master의 공통된 시작점으로 간 뒤에

49
00:04:32,000 --> 00:04:40,000
여기 보이는 것처럼 A' B' C'와 같이 commit들을 다시 적용하는 것입니다

50
00:04:40,000 --> 00:04:48,000
무슨 일이 일어날지 한번 봅시다

51
00:04:48,000 --> 00:04:54,000
git rebase master를 해볼게요, 저는 현재 dev branch에 있고

52
00:04:54,000 --> 00:04:58,000
dev branch에서 rebase를 요청할 겁니다

53
00:04:58,000 --> 00:05:01,000
따라서 현 branch에서의 공통 시작 지점을 찾은 뒤에

54
00:05:01,000 --> 00:05:04,000
공통 시작점 이후에 생성된 모든 commit은 잠시 보관해두고

55
00:05:04,000 --> 00:05:09,000
master branch의 모든 commit을 업데이트한 뒤 아까 dev에서 보관해둔 commit들을 이어 붙입니다

56
00:05:09,000 --> 00:05:11,000
이게 rebase가 하는 것입니다

57
00:05:11,000 --> 00:05:15,000
좋아요, toto를 적용하는 것을 성공했습니다

58
00:05:15,000 --> 00:05:24,000
왜냐구요? master부터 시작해서 toto commit을 적용할 수 있는지 확인하기 때문입니다

59
00:05:24,000 --> 00:05:27,000
toto commit은 toto file을 추가한 곳이고

60
00:05:27,000 --> 00:05:30,000
commit간의 충돌이 없었습니다

61
00:05:30,000 --> 00:05:33,000
pouet도 같은 방법으로 시도해볼게요, 잠시만요 문제가 생겼네요

62
00:05:33,000 --> 00:05:37,000
한 commit이 pouet을 수정했고 다른 commit도 pouet을 수정했습니다

63
00:05:37,000 --> 00:05:44,000
게다가 같은 줄에서 수정하는 바람에 변경 사항을 자동으로 merge할 수 없습니다

64
00:05:44,000 --> 00:05:48,000
만약 변경 사항이 파일의 서로 다른 줄에 존재했다면

65
00:05:48,000 --> 00:05:51,000
파일을 자동으로 merge 할 수 있었을 겁니다, 그런데 여기는 그렇지 않아서 막혔습니다

66
00:05:51,000 --> 00:05:54,000
그리고 문제가 있다고 오류를 출력할 겁니다

67
00:05:54,000 --> 00:05:57,000
우리는 지금 매우 특이한 상황에 놓여 있습니다

68
00:05:57,000 --> 00:06:00,000
보시다시피 충돌이 발생하는 바람에 merge에 실패했습니다

69
00:06:00,000 --> 00:06:04,000
그래서 현재 rebase의 중간지점에 있습니다

70
00:06:04,000 --> 00:06:07,000
'git status' 명령으로 'rebase in progress'를 확인할 수 있으며

71
00:06:07,000 --> 00:06:13,000
이는 현재 dev branch에서 rebase 도중이라는 뜻입니다

72
00:06:13,000 --> 00:06:17,000
이 명령은 이번 commit인 pouet 18을 취소하라고 제안합니다

73
00:06:17,000 --> 00:06:24,000
이는 현재 branch에서 pouet to 18 commit을

74
00:06:24,000 --> 00:06:27,000
하지 말라는 뜻이죠

75
00:06:27,000 --> 00:06:31,000
또는 rebase를 중단하기를 제안합니다, 그 말인즉 모든 것을 취소하고

76
00:06:31,000 --> 00:06:36,000
우리가 원래 있던 곳으로 돌아간 뒤에

77
00:06:36,000 --> 00:06:39,000
문제를 해결하고 다시 rebase 하겠다는 뜻입니다

78
00:06:39,000 --> 00:06:41,000
문제를 해결해 봅시다, 일단 여기에 수정된 파일 중에서도

79
00:06:41,000 --> 00:06:45,000
특히 문제가 생긴 파일들의 목록이 표시됩니다, 이번 경우에는 pouet이죠

80
00:06:45,000 --> 00:06:47,000
만약 이 파일을 열면

81
00:06:47,000 --> 00:06:55,000
====과 >>>>를 볼 수 있습니다, 이 부분이 merge에 실패한 곳입니다

82
00:06:55,000 --> 00:07:02,000
우리가 rebase 하려고 했던 것은 4 부분이고

83
00:07:02,000 --> 00:07:05,000
위에 넣으려고 했던 것은 18인 부분입니다

84
00:07:05,000 --> 00:07:08,000
그래서 이제 어떤 것이 올바른 버전인지

85
00:07:08,000 --> 00:07:11,000
선택해야 합니다

86
00:07:11,000 --> 00:07:16,000
git은 이걸 할 수 없기 때문에 우리가 수동으로 다뤄주어야 합니다

87
00:07:16,000 --> 00:07:20,000
이번 경우에는 18이 맞는 값이라고 합시다

88
00:07:20,000 --> 00:07:30,000
그러나 이번에는 19로 바꿀 겁니다, 이게 옳은 값임을 알고 있기 때문이죠

89
00:07:30,000 --> 00:07:35,000
git status로 아무 일도 일어나지 않았다는 것을 볼 수 있습니다

90
00:07:35,000 --> 00:07:41,000
git의 시점에서, pouet은 rebase와 저에 의해 수정되었습니다

91
00:07:41,000 --> 00:07:47,000
git add pouet을 통해서 이제 옳은 파일이 추가되었음을 알려주었어요

92
00:07:47,000 --> 00:07:51,000
문제가 있는 commit을 다시 열고

93
00:07:51,000 --> 00:07:55,000
새로운 값으로 수정한 뒤에 다시 닫은 겁니다

94
00:07:55,000 --> 00:07:58,000
이제 수정된 pouet을 볼 수 있으며 아무런 문제도 발생하지 않았죠

95
00:07:58,000 --> 00:08:04,000
now I can fix my rebase, it will close the commit
이제 rebase를 고칠 수 있고 이는 commit을 끝낼 겁니다

96
00:08:04,000 --> 00:08:11,000
그리고 다음 commit에서 작업을 계속할 수 있습니다

97
00:08:11,000 --> 00:08:17,000
git log를 통해 현재 제가 dev branch에 있다는 것을 확인하였고

98
00:08:17,000 --> 00:08:20,000
보시다시피 지금 master branch는 제 기록에 있습니다

99
00:08:20,000 --> 00:08:25,000
rebase를 통해서 같은 시작점을 찾았고, 이거겠지요

100
00:08:25,000 --> 00:08:29,000
master의 맨 위로 이동해서 이 commit들을 적용했습니다

101
00:08:29,000 --> 00:08:35,000
자세히 보시면 50f7가 있죠

102
00:08:35,000 --> 00:08:39,000
이전 기록을 되짚어 보면 toto added는 ea644이었습니다

103
00:08:39,000 --> 00:08:46,000
왜냐하면 이 commit(50f7)은 여기서(ea644) 왔지만

104
00:08:46,000 --> 00:08:50,000
그 전에 여기(ca4ea)서 왔고

105
00:08:50,000 --> 00:08:52,000
두 commit에 차이점이 있었기 때문에 새롭게 commit한겁니다

106
00:08:52,000 --> 00:08:54,000
달리 말하면, 그들은 같은 commit이 아닙니다

107
00:08:54,000 --> 00:08:57,000
같은 일을 한다고 하더라도

108
00:08:57,000 --> 00:09:01,000
단지 같은 장소에 연결되어 있지 않기 때문에 서로 다른 ID를 갖습니다

109
00:09:01,000 --> 00:09:05,000
여기 pouet to 18이 있습니다, 현재는 의미 없죠

110
00:09:05,000 --> 00:09:09,000
지금은 값이 19이기 때문이에요

111
00:09:09,000 --> 00:09:14,000
commit 이름을 바꿀 방법이 있습니다

112
00:09:14,000 --> 00:09:18,000
조심해야 해요, 강력하고 위험한 도구입니다

113
00:09:18,000 --> 00:09:23,000
git commit --amend로 pouet to 19를 입력합니다

114
00:09:23,000 --> 00:09:33,000
원래 적용되어야 하지만, 이 컴퓨터에는 문제가 있어 적용되지 않았습니다

115
00:09:33,000 --> 00:09:43,000
git commit --amend -m "pouet to 19"를 입력합니다

116
00:09:43,000 --> 00:09:48,000
제대로 되었네요, 이름을 바꿨을 뿐입니다, 문제없어요

117
00:09:48,000 --> 00:09:54,000
이제 rebase에 대해 배웠습니다

118
00:09:54,000 --> 00:09:56,000
제 branch 아래에 또 다른 branch를 가져와

119
00:09:56,000 --> 00:09:58,000
모든 commit을 상단에 넣었고

120
00:09:58,000 --> 00:10:01,000
이로 인해 발생하는 문제를 해결하고 싶었습니다

121
00:10:01,000 --> 00:10:04,000
이제 또 다른 명령어인 git merge를 봅시다

122
00:10:04,000 --> 00:10:07,000
git merge는 정확하게 같은 건 아닙니다

123
00:10:07,000 --> 00:10:11,000
여기 보시죠

124
00:10:11,000 --> 00:10:17,000
이 branch와 branch의 모든 commit들,

125
00:10:17,000 --> 00:10:20,000
그 차이점을 가져와서 이 commit들을 제 branch에 넣기 위한

126
00:10:20,000 --> 00:10:26,000
merge commit을 만들고 싶습니다

127
00:10:26,000 --> 00:10:30,000
아래에 넣는 대신에 위에 넣고 싶습니다

128
00:10:30,000 --> 00:10:34,000
여러분이 보셨던 것처럼 dev에서는 rebase를 했었습니다

129
00:10:34,000 --> 00:10:39,000
이번에는 master branch에서 새 branch를 추가할 것입니다

130
00:10:39,000 --> 00:10:46,000
master branch로 가서

131
00:10:46,000 --> 00:10:52,000
dev branch와 merge를 하면

132
00:10:52,000 --> 00:10:56,000
제대로 동작할 겁니다

133
00:10:56,000 --> 00:11:01,000
git log로 확인해 보면 저는 merge commit을 갖고 있지 않습니다

134
00:11:01,000 --> 00:11:06,000
왜일까요? dev branch는 뷰(시점)의 이전 지점으로부터 master branch를 따라가기 때문입니다

135
00:11:06,000 --> 00:11:12,000
그래서 그 commit을 가져와 뒤에 넣었습니다

136
00:11:12,000 --> 00:11:16,000
dev branch가 master branch의 상단에 있지 않다고 생각해봅시다

137
00:11:16,000 --> 00:11:20,000
다시 pouet 파일을 수정해서

138
00:11:20,000 --> 00:11:23,000
20을 입력합니다

139
00:11:23,000 --> 00:11:29,000
add pouet을 하고 commit명을 "pouet to 20"으로 합시다

140
00:11:29,000 --> 00:11:34,000
status를 확인했습니다, 좋아요

141
00:11:34,000 --> 00:11:36,000
이제 master branch는 dev branch와 같은 장소에 있지 않아요

142
00:11:36,000 --> 00:11:38,000
dev branch에 가서

143
00:11:38,000 --> 00:11:43,000
다시 toto를 수정합니다

144
00:11:43,000 --> 00:11:49,000
lolilol를 입력할게요

145
00:11:49,000 --> 00:11:52,000
add toto를 하고

146
00:11:52,000 --> 00:12:00,000
"toto to lolilol"라는 이름으로 commit을 진행합니다

147
00:12:00,000 --> 00:12:08,000
git log를 보면, toto는 dev branch에서 lolilol로 바뀌었습니다

148
00:12:08,000 --> 00:12:16,000
master branch의 git log를 보면 pouet to 20이라는 같은 값을 가지고 있지 않습니다

149
00:12:16,000 --> 00:12:18,000
같은 장소에 있지 않다는 뜻입니다

150
00:12:18,000 --> 00:12:22,000
master branch로 다시 돌아가

151
00:12:22,000 --> 00:12:26,000
git merge dev를 하면

152
00:12:26,000 --> 00:12:29,000
master branch에 dev branch를 갖고 왔지만 master branch의 상단에는

153
00:12:29,000 --> 00:12:39,000
dev branch의 merge commit이 생깁니다

154
00:12:39,000 --> 00:12:45,000
dev branch의 모든 commit을 갖고 와 master branch에서 그들을 merge 하려는 겁니다

155
00:12:45,000 --> 00:12:50,000
다시 조그마한 문제가 생겼네요

156
00:12:50,000 --> 00:13:00,000
-m을 사용할게요, vi 관련 문제점이지만 지금 당장은 수정하지 않을 겁니다

157
00:13:00,000 --> 00:13:06,000
큰 문제는 아닙니다

158
00:13:06,000 --> 00:13:11,000
지금 master branch에 있고

159
00:13:11,000 --> 00:13:18,000
dev branch의 commit들이 맨 위에 있습니다

160
00:13:18,000 --> 00:13:24,000
보시다시피, merge commit은 일종의 보장입니다

161
00:13:24,000 --> 00:13:32,000
모든 것이 제대로 동작하리라는 보장 말이죠

162
00:13:32,000 --> 00:13:38,000
dev branch의 commit들을 추가하고 merge commit을 만듭니다

163
00:13:38,000 --> 00:13:40,000
여기 간단한 예시를 보여드릴게요

164
00:13:40,000 --> 00:13:44,000
문제점을 만들어봅시다

165
00:13:44,000 --> 00:13:54,000
pouet을 수정하고 넣습니다, 미안합니다, 이걸 하기 전에

166
00:13:54,000 --> 00:14:14,000
먼저 rebase master를 할게요, git에는 문제가 생기지 않습니다

167
00:14:14,000 --> 00:14:18,000
처음부터 다시 해보죠

168
00:14:18,000 --> 00:14:23,000
pouet의 값을 24로 수정하였습니다

169
00:14:23,000 --> 00:14:30,000
add하고 "pouet to 24"라는 이름으로 commit 합니다

170
00:14:30,000 --> 00:14:37,000
이 비디오가 정말 길다는 것을 압니다, 전체적인 흐름을 보여드려야 하기 때문에 중요해요

171
00:14:37,000 --> 00:14:41,000
저는 현재 dev branch에 있어요, 좋아요

172
00:14:41,000 --> 00:14:50,000
master branch로 돌아와서, pouet에 또 다른 값을 넣고

173
00:14:50,000 --> 00:14:59,000
pouet to 29라는 이름으로 commit 합니다

174
00:14:59,000 --> 00:15:05,000
master branch에서 git merge dev를 합니다

175
00:15:05,000 --> 00:15:09,000
충돌이 났네요

176
00:15:09,000 --> 00:15:12,000
직전의 rebase 때처럼 말이죠

177
00:15:12,000 --> 00:15:17,000
문제가 생겼을 때 항상 git status를 사용하세요

178
00:15:17,000 --> 00:15:20,000
현재 진행하던 merge에서 충돌이 났다고 합니다

179
00:15:20,000 --> 00:15:24,000
merge commit을 중단할지, 계속할지

180
00:15:24,000 --> 00:15:28,000
결정할 수 있습니다

181
00:15:28,000 --> 00:15:32,000
평소처럼 pouet 파일은 양쪽에서 수정되었습니다

182
00:15:32,000 --> 00:15:36,000
여기선 master branch가 main이라는 걸 볼 수 있습니다

183
00:15:36,000 --> 00:15:42,000
merge는 제가 있는 branch에서 시작하고

184
00:15:42,000 --> 00:15:45,000
rebase는 제가 rebase를 하고 싶은 곳이 main이 됩니다

185
00:15:45,000 --> 00:15:48,000
여기 HEAD는 master branch고, dev branch에는 24가 있습니다

186
00:15:48,000 --> 00:15:52,000
master branch가 맞다고 해봅시다

187
00:15:52,000 --> 00:16:00,000
그 전에 잠시만요, 또 다르게 수정해봅시다

188
00:16:00,000 --> 00:16:03,000
상관없습니다, 또 다른 수정일 뿐입니다

189
00:16:03,000 --> 00:16:06,000
이제 add pouet을 하고

190
00:16:06,000 --> 00:16:10,000
git status를 하면 git commit이 필요하다고 알려줍니다

191
00:16:10,000 --> 00:16:18,000
이번에는 "pouet to 30"이라고 해봅시다

192
00:16:18,000 --> 00:16:26,000
git status하고 git log를 보면 pouet to 24를 볼 수 있습니다

193
00:16:26,000 --> 00:16:28,000
pouet to 29도 리스트에 있습니다

194
00:16:28,000 --> 00:16:34,000
하지만 엄밀히 말하면 그것들은 실제로는 연속된 commit이 아닙니다

195
00:16:34,000 --> 00:16:36,000
사실 여러분은 아까 dev branch를 상단에 추가했습니다

196
00:16:36,000 --> 00:16:40,000
이로 인해 제 branch의 상단에 차이점이 생겼고

197
00:16:40,000 --> 00:16:44,000
두 branch를 통합한 commit이 이것입니다

198
00:16:44,000 --> 00:16:48,000
여기 dev branch는

199
00:16:48,000 --> 00:16:50,000
pouet이 수정되었던 commit과, pouet을 수정했던 또 다른 commit을 갖고 있네요

200
00:16:50,000 --> 00:16:54,000
이것이 전체적인 동작입니다

201
00:16:54,000 --> 00:17:00,000
이 기록은 그다지 명확하지 않다는 점을 알아두세요, 그리고 이것이 merge commit입니다

202
00:17:00,000 --> 00:17:08,000
merge commit은 이렇게 MERGE라 표시됩니다, 그리고 merge된 다양한 commit들을 보여줍니다

203
00:17:08,000 --> 00:17:12,000
좋아요, 영상이 좀 길어졌죠, 하지만 이제 rebase와 merge가 어떻게 동작하는지 알게 되었습니다

204
00:17:12,000 --> 00:17:14,000
이제 한 branch에서 또 다른 branch로 이동하거나

205
00:17:14,000 --> 00:17:17,000
branch에서 다른 branch로 업데이트를 작성해도 문제없습니다

206
00:17:17,000 --> 00:59:59,000
이제 여러분들은 두 가지 강력한 도구들을 알았습니다
<< translated by inyang, ji-kim, mseo and mki, yeslee :) >>
