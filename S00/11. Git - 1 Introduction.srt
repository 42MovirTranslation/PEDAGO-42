1
00:00:01,000 --> 00:00:05,000
오늘 비디오는 매우 강력한 도구인 git에 관한 내용입니다

2
00:00:05,000 --> 00:00:08,000
git은 여러분의 프로젝트 버전을 관리하는 도구입니다

3
00:00:08,000 --> 00:00:09,000
그러면 버전 관리란 무엇일까요?

4
00:00:09,000 --> 00:00:12,000
t 시간에 여러분의 프로젝트 사진을 찍는다고 합시다

5
00:00:12,000 --> 00:00:14,000
그다음 t+1 시간에 또 다른 사진을 찍습니다

6
00:00:14,000 --> 00:00:16,000
t+2에도 마찬가지로요

7
00:00:16,000 --> 00:00:19,000
오직 차이점만 저장됩니다

8
00:00:19,000 --> 00:00:22,000
이건 여러분을 과거로 되돌려 줄 수 있고

9
00:00:22,000 --> 00:00:26,000
원격에서 그 차이점들을 저장합니다

10
00:00:26,000 --> 00:00:30,000
이제 여러분의 현재 상태에 도달하기 위한 경로를 공유할 수 있습니다

11
00:00:30,000 --> 00:00:33,000
무엇보다도, 그룹으로 일할 때 가능할 거에요

12
00:00:33,000 --> 00:00:36,000
흥미롭지 않나요

13
00:00:36,000 --> 00:00:39,000
다양한 버전들을 이용해서

14
00:00:39,000 --> 00:00:42,000
예시를 들어보겠습니다.

15
00:00:42,000 --> 00:00:45,000
목표는 그룹으로 작업하는 겁니다

16
00:00:45,000 --> 00:00:49,000
시작 버전인 A의 ftp 서버에 파일이 있다고 해봅시다

17
00:00:49,000 --> 00:00:52,000
내려받아서 버전 B를 만듭시다

18
00:00:52,000 --> 00:00:56,000
누군가는 내려받아서 버전 C로 만듭니다

19
00:00:56,000 --> 00:00:59,000
그다음 버전 B를 가진 사람이 ftp서버로 보냅니다

20
00:00:59,000 --> 00:01:02,000
버전 C를 가진 사람이 ftp 서버로 보냅니다

21
00:01:02,000 --> 00:01:05,000
남은 건 오직 버전 C일 뿐입니다

22
00:01:05,000 --> 00:01:10,000
버전 B를 만들기 위해 편집한 모든 것은 없어졌습니다

23
00:01:10,000 --> 00:01:15,000
만약 버전 C를 만든 사람이 더욱 조심했다면

24
00:01:15,000 --> 00:01:19,000
그 버전이 A인지 ftp에서 처음 확인했을 겁니다

25
00:01:19,000 --> 00:01:21,000
만약 그 경우가 아니라면, 버전 B를 내려받았겠죠

26
00:01:21,000 --> 00:01:25,000
그 뒤, 직접, 버전 C에서 작업한 모든 것을 버전 B에 추가합니다

27
00:01:25,000 --> 00:01:30,000
그리고 버전 B의 수정본 버전 D를 생성합니다

28
00:01:30,000 --> 00:01:35,000
git을 사용하면, 위 과정을 자동으로 처리해줍니다

29
00:01:35,000 --> 00:01:41,000
git은 파일들 사이의 차이를 봅니다

30
00:01:41,000 --> 00:01:45,000
오직 그 차이만을 저장하고 commit이라고 불리는 무언가를 만듭니다

31
00:01:45,000 --> 00:01:51,000
commit이란 무엇일까요? 모든 프로젝트의 스냅 샷이라고 말하고 싶어요

32
00:01:51,000 --> 00:01:57,000
고로 A는 어떤 원격 서버의 commit입니다

33
00:01:57,000 --> 00:02:04,000
제 컴퓨터에서 버전 A를 수정하기 위해 모든 commit을 내려받았습니다

34
00:02:04,000 --> 00:02:08,000
이제 작업을 해서, 새로운 commit, B를 만듭시다

35
00:02:08,000 --> 00:02:15,000
B는 A와 B의 모든 차이점이 있을 겁니다

36
00:02:15,000 --> 00:02:18,000
누군가는 또 같은 방법으로 새로운 commit, C를 만듭니다

37
00:02:18,000 --> 00:02:27,000
아마도 어떤 다른 파일은 편집될 거고, 기존의 commit C에서 수정된 새로운 commit, C를 만듭니다

38
00:02:27,000 --> 00:02:31,000
서버에 commit B를 먼저 올릴 겁니다

39
00:02:31,000 --> 00:02:38,000
그러면 commit B는 master의 새 commit이 되었습니다

40
00:02:38,000 --> 00:02:41,000
여기 직선 끝에

41
00:02:41,000 --> 00:02:46,000C
git commit C를 가진 사람이 있는데

42
00:02:46,000 --> 00:02:55,000
A는 더는 master가 아니므로 오류를 수신합니다

43
00:02:55,000 --> 00:03:00,000
이제 그 사람은 commit B를 가져와서

44
00:03:00,000 --> 00:03:06,000
commit B의 편집 내용과 같은 영역을 수정했는지 확인해야 합니다

45
00:03:06,000 --> 00:03:10,000
이것보다 더 쉽게 합칠 수 있는 건

46
00:03:10,000 --> 00:03:18,000
commit B를 사용해서 필요한 부분을 수정하면

47
00:03:18,000 --> 00:03:20,000
자동으로 새로운 commit인 D가 생성될 겁니다

48
00:03:20,000 --> 00:03:26,000
commit C는 A로부터 왔고, commit A와 살짝 다른 새로운 commit D를 가지고 있습니다

49
00:03:26,000 --> 00:03:30,000
만약 이 commit이 만족스럽다면, 문제는 해결될 겁니다.

50
00:03:30,000 --> 00:03:35,000
서버에 이 commit을 원격에서 추가할 수 있습니다

51
00:03:35,000 --> 00:03:40,000
이제 모두 이 commit에서 작업할 수 있습니다

52
00:03:40,000 --> 00:03:44,000
이제 무리 그룹으로 작업하는 데 얼마나 유용한지 볼 수 있고,

53
00:03:44,000 --> 00:03:48,000
올바른 버전에서 작업하고 있는지 확인하세요

54
00:03:48,000 --> 00:03:51,000
git은 많은 알고리즘을 사용해

55
00:03:51,000 --> 00:03:55,000
파일을 합치기 위해 자동으로 많은 일을 합니다

56
00:03:55,000 --> 00:03:58,000
예를 들어 한 명이 파일 꼭대기의 함수에서 작업하고

57
00:03:58,000 --> 00:04:00,000
파일 중간에서 또 다른 사람이 작업한다면

58
00:04:00,000 --> 00:04:06,000
git은 로컬 버전에서 업데이트했을 때 두 파일을 자동으로 조립하면서

59
00:04:06,000 --> 00:04:08,000
같은 섹션에서 작업하고 있지 않은걸 볼 겁니다

60
00:04:08,000 --> 00:04:15,000
git은 문제없다고 말할 것이고, 받은 새로운 편집과 함께 새로운 파일을 만들고

61
00:04:15,000 --> 00:04:23,000
다른 사람들이 작업하면서 업데이트되는 동안, 당신의 프로젝트에서 계속해서 작업할 수 있습니다

62
00:04:23,000 --> 00:59:59,000
이건 매우 강력합니다

<< translated by mki, mseo, inyang, ji-kim and yeslee :) >>
