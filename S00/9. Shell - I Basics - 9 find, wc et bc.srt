1
00:00:01,000 --> 00:00:07,000
환영합니다, 이번 영상에서는 더 어려운 쉘 기능들을 알아봅시다

2
00:00:07,000 --> 00:00:12,000
우리가 볼 첫 번째 기능은 find입니다

3
00:00:12,000 --> 00:00:17,000
find는 파일 트리에서 검색할 수 있게 해줍니다

4
00:00:17,000 --> 00:00:22,000
첫 번째 인자는 검색을 시작할 디렉토리입니다

5
00:00:22,000 --> 00:00:27,000
아주 간단하게 디렉토리를 현재 디렉토리인 . 으로 하죠

6
00:00:27,000 --> 00:00:30,000
find . 다음에 액션을 추가할 수도 있습니다

7
00:00:30,000 --> 00:00:33,000
지금은 아무 액션도 넣지 않을 겁니다

8
00:00:33,000 --> 00:00:39,000
. 부터 시작하여 .으로 시작하는 나머지 디렉토리를 살펴보고

9
00:00:39,000 --> 00:00:45,000
하위 디렉토리로 가서 결과를 검색한 뒤 파일 구조를 보여줍니다

10
00:00:45,000 --> 00:00:54,000
이제 어떤 액션을 수행할 수도 있고 결과들을 필터링할 수도 있습니다

11
00:00:54,000 --> 00:01:00,000
find .을 입력하고 특정 파일을 검색할 수도 있습니다

12
00:01:00,000 --> 00:01:04,000
정확히 같은 이름의 파일을 찾으려면 -name 옵션을 사용합니다

13
00:01:04,000 --> 00:01:10,000
예를 들어 bonjour.txt파일이 어디 있는지 알고 싶다면

14
00:01:10,000 --> 00:01:16,000
find . -name  명령어는 입력한 위치에 있는 모든 파일을
입력한 이름으로 검색합니다

15
00:01:16,000 --> 00:01:22,000
특정 유형의 파일들만 검색할 수도 있습니다

16
00:01:22,000 --> 00:01:28,000
Ctrl K로 현재 줄의 나머지를 잘라낼 수 있고

17
00:01:28,000 --> 00:01:33,000
-type d 혹은 -type directory는 디렉토리만 찾을 수 있습니다

18
00:01:33,000 --> 00:01:40,000
이젠 txt 파일은 없고 디렉토리만 보이며 현재 디렉토리를 의미하는 .와

19
00:01:40,000 --> 00:01:47,000
하위 디렉토리를 모두 출력합니다

20
00:01:47,000 --> 00:01:56,000
다른 기능으로 검색의 깊이를 설정하는 maxdepth를 사용할 수 있습니다

21
00:01:56,000 --> 00:02:00,000
이건 아주 중요합니다
왜냐하면 가끔 파일이 아주 큰 파일 트리안에 깊숙이 있거나

22
00:02:00,000 --> 00:02:09,000
root에서 많은 하위 디렉토리를 가질 수 있기 때문입니다

23
00:02:09,000 --> 00:02:12,000
그래서 검색의 깊이를 제한할 수 있습니다

24
00:02:12,000 --> 00:02:15,000
maxdepth를 1로 설정하고 시작하면

25
00:02:15,000 --> 00:02:20,000
기본적으로 레벨 1 밑으로 검색하지 않습니다

26
00:02:20,000 --> 00:02:23,000
그래서 .가 다른 파일 및 폴더와 함께 여기 보여집니다

27
00:02:23,000 --> 00:02:28,000
그리고 만약 maxdepth를 0으로 설정하면 . 디렉토리가 있을 것이고

28
00:02:28,000 --> 00:02:32,000
자기 자신만 보일 겁니다

29
00:02:32,000 --> 00:02:36,000
그리고 maxdepth 1로 한 단계 밑으로 갈 수 있습니다

30
00:02:36,000 --> 00:02:41,000
보시다시피 다른 결과들은 ‘/’와 함께 표시됩니다

31
00:02:41,000 --> 00:02:44,000
여기서 확인할 수 있듯이 디렉토리 안에 세 개의 파일들이 있습니다

32
00:02:44,000 --> 00:02:48,000
이제 똑같은 것을 이번엔 maxdepth 2로 해보겠습니다

33
00:02:48,000 --> 00:02:50,000
그럼 이제 레벨 2 밑으로 갈 수 있고

34
00:02:50,000 --> 00:02:54,000
이것들은 레벨 1에 포함될 겁니다

35
00:02:54,000 --> 00:02:58,000
레벨 2

36
00:02:58,000 --> 00:03:02,000
이건 깊이 레벨 3에 있기 때문에 보여지지 않을 것입니다

37
00:03:02,000 --> 00:03:16,000
확인해보면 이것만 포함되지 않은 다른 모든 결과를 볼 수 있습니다

38
00:03:16,000 --> 00:03:22,000
이번에는 단어 개수를 셀 수 있는 기능인 wc를 보겠습니다

39
00:03:22,000 --> 00:03:29,000
wc를 사용해서 파일 안에 있는 라인이나 단어 혹은 문자를 셀 수 있습니다

40
00:03:29,000 --> 00:03:33,000
테스트 파일로 한번 시도해봅시다

41
00:03:33,000 --> 00:03:36,000
이 test.txt 파일에 있는 라인의 수를 세도록 요청할 수 있습니다

42
00:03:36,000 --> 00:03:38,000
3개의 라인이 있네요

43
00:03:38,000 --> 00:03:42,000
다음으로 -w 옵션으로 단어의 개수를 셀 수 있습니다

44
00:03:42,000 --> 00:03:45,000
9개의 단어가 있네요

45
00:03:45,000 --> 00:03:48,000
3개의 라인과 9개의 단어

46
00:03:48,000 --> 00:03:53,000
그리고 문자의 개수도 셀 수 있습니다

47
00:03:53,000 --> 00:03:57,000
58개의 문자를 찾았네요

48
00:03:57,000 --> 00:04:07,000
ls를 사용하여 문자가 58개인 것이 확인되었습니다

49
00:04:07,000 --> 00:04:11,000
그리고 wc는 옵션 없이도 동작하며

50
00:04:11,000 --> 00:04:19,000
파일의 라인과 단어 그리고 문자의 개수를 출력합니다

51
00:04:19,000 --> 00:04:24,000
매우 쉽고 유용하겠죠?

52
00:04:24,000 --> 00:04:27,000
이번에 볼 조금 더 복잡한 기능은 bc입니다

53
00:04:27,000 --> 00:04:31,000
bc는 명령어 라인에서 사용할 수 있는 계산기입니다

54
00:04:31,000 --> 00:04:33,000
bc에 연산을 입력하여 계산을 요청할 수 있습니다

55
00:04:33,000 --> 00:04:37,000
예로 6*7을 입력하면 결과를 출력합니다

56
00:04:37,000 --> 00:04:43,000
만약 연산이 끝나지 않았다면 아무것도 출력되지 않습니다

57
00:04:43,000 --> 00:04:49,000
x=6과 y=7을 입력하면

58
00:04:49,000 --> 00:04:51,000
할당만 해준 상태이기 때문에 아직은 아무것도 출력되지 않습니다

59
00:04:51,000 --> 00:04:59,000
그런데 x*y를 입력하면 결과가 출력됩니다

60
00:04:59,000 --> 00:05:01,000
만약 z = x*y라고 쓰고

61
00:05:01,000 --> 00:05:10,000
z를 입력하면 결과가 출력됩니다

62
00:05:10,000 --> 00:05:13,000
즉 bc는 변수를 사용할 수 있습니다

63
00:05:13,000 --> 00:05:19,000
bc는 괄호도 사용할 수 있습니다

64
00:05:19,000 --> 00:05:24,000
bc를 종료하기 위해 quit을 입력합니다

65
00:05:24,000 --> 00:59:59,000
끝입니다, 이번 영상은 이러한 기능들에 대해 알아봤습니다
<< translated by yeslee, inyang, chelee, ji-kim, mseo and mki :) >>
