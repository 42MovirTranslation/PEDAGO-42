1
00:00:01,000 --> 00:00:09,000
이번 비디오에서는 프로그램의 입출력에 대해 알아보겠습니다

2
00:00:09,000 --> 00:00:16,000
각 프로그램에는 표준 입력, 표준 출력, 표준 에러 스트림이 존재한다는 점을 알아두세요

3
00:00:16,000 --> 00:00:20,000
예를 들어 cat 같은 프로그램을 사용할 때에

4
00:00:20,000 --> 00:00:24,000
인자를 입력하지 않는다면 프로그램은 표준 입력을 사용합니다

5
00:00:24,000 --> 00:00:27,000
표준 입력의 기본값은 여러분의 키보드입니다

6
00:00:27,000 --> 00:00:31,000
그 후에 표준 출력으로 결과를 출력합니다

7
00:00:31,000 --> 00:00:40,000
처리 중에 에러를 발견한다면 표준 에러로 에러 메시지를 표시하지요

8
00:00:40,000 --> 00:00:42,000
출력값들을 구분하는 이유가 무엇일까요?

9
00:00:42,000 --> 00:00:46,000
우리는 잠재적으로 더 많은 stdout을 처리하고자 하며

10
00:00:46,000 --> 00:00:50,000
좋은 결괏값만을 처리하고 싶고

11
00:00:50,000 --> 00:00:57,000
에러들은 무효로 하거나 다른 쪽으로 돌리고 싶습니다

12
00:00:57,000 --> 00:01:00,000
일반적으로 출력값(stdout, stderr)은 이런 식으로 사용됩니다

13
00:01:00,000 --> 00:01:07,000
우리의 프로그램을 다른 프로그램들과 연결하고 싶을 때

14
00:01:07,000 --> 00:01:11,000
이건 살짝 더 복잡한 예시가 되겠습니다만

15
00:01:11,000 --> 00:01:15,000
표준입력을 사용해서 프로그램을 실행시킵니다

16
00:01:15,000 --> 00:01:20,000
그리고 우리는 이 표준출력을 다른 프로그램의 입력값으로 리다이렉트하고 싶어요

17
00:01:20,000 --> 00:01:25,000
이 예시에서 우리는 이걸 grep의 입력값으로 리다이렉트 할 거예요

18
00:01:25,000 --> 00:01:31,000
grep은 ls를 모종의 기준에 따라 필터링합니다

19
00:01:31,000 --> 00:01:39,000
그리고 grep은 결괏값을 화면에 출력하겠죠, 지금은 아무것도 없지만요

20
00:01:39,000 --> 00:01:42,000
ls에는 특정한 값을 리다이렉트 하지 않았으니

21
00:01:42,000 --> 00:01:50,000
ls의 표준 입력은 키보드가 될 겁니다

22
00:01:50,000 --> 00:01:54,000
여기 에러 출력 id는 에러 로그 파일로 전달됩니다

23
00:01:54,000 --> 00:01:59,000
에러가 있다면 이 파일로 전달되겠죠

24
00:01:59,000 --> 00:02:07,000
이제 이 일련의 과정을 쉘에서는 어떻게 하는지 봅시다

25
00:02:07,000 --> 00:02:12,000
ls는 그 자체로 표준 출력값을 화면에 띄워줍니다

26
00:02:12,000 --> 00:02:21,000
그래서 만약 출력값을 리다이렉트 하기를 원한다면 파이프(|)를 사용해야 합니다

27
00:02:21,000 --> 00:02:26,000
그래야 다른 프로그램으로 리다이렉트 됩니다

28
00:02:26,000 --> 00:02:31,000
ls의 결괏값을 다른 프로그램과 연결해봅시다

29
00:02:31,000 --> 00:02:36,000
예를 들어 grep txt

30
00:02:36,000 --> 00:02:43,000
이건 txt를 포함하는 결괏값만 걸러줄 겁니다

31
00:02:43,000 --> 00:02:50,000
ls의 출력값을 grep의 입력값으로 연결했어요

32
00:02:50,000 --> 00:03:00,000
그리고 grep의 stdout은 화면에 표시됩니다

33
00:03:00,000 --> 00:03:05,000
이제 파일로 리다이렉트하는 방법을 살펴봅시다

34
00:03:05,000 --> 00:03:12,000
이 예시에서는 stderr를 파일로 리다이렉트하는 것이 목표입니다

35
00:03:12,000 --> 00:03:16,000
이미 우리는 stdout을 파일로 리다이렉트할 수 있어요

36
00:03:16,000 --> 00:03:30,000
제법 단순해요, > 옵션을 사용해서 결과가 적힐 파일을 특정합니다

37
00:03:30,000 --> 00:03:38,000
원래 있던 파일은 사용하지 맙시다

38
00:03:38,000 --> 00:03:41,000
ls는 아무것도 출력하지 않아요, 모든 stdout이 res.txt로 리다이렉트 됐으니까요

39
00:03:41,000 --> 00:03:52,000
res 파일을 확인하면 이 디렉토리의 요소들이 들어 있는 것을 볼 수 있어요

40
00:03:52,000 --> 00:03:56,000
이전에는 res.txt가 존재하지 않았다는 것을 눈치채셨을 겁니다

41
00:03:56,000 --> 00:04:08,000
res.txt에 리다이렉트하기 위해 ls를 실행하니 지금은 존재합니다

42
00:04:08,000 --> 00:04:12,000
stdout을 리다이렉트하는 건 ls가 아니라 쉘입니다

43
00:04:12,000 --> 00:04:18,000
ls를 실행하기 전 쉘은 res.txt를 생성합니다

44
00:04:18,000 --> 00:04:22,000
그리고 ls 프로그램을 이 파일과 연결하죠

45
00:04:22,000 --> 00:04:25,000
그래서 모든 결괏값이 이 파일로 리다이렉트됩니다

46
00:04:25,000 --> 00:04:30,000
이제는 우리가 만들 수 있는 에러들에 대해 말해볼게요

47
00:04:30,000 --> 00:04:38,000
rm을 사용해서 res.txt를 삭제합니다

48
00:04:38,000 --> 00:04:42,000
존재하지 않는 파일을 ls로 보고 싶어요

49
00:04:42,000 --> 00:04:49,000
ls는 파일을 찾을 수 없다고 알립니다

50
00:04:49,000 --> 00:04:55,000
만약 지금 이 ls 결괏값을 res.txt 파일로 리다이렉트한다면

51
00:04:55,000 --> 00:04:59,000
res.txt에는 아무것도 들어있지 않죠

52
00:04:59,000 --> 00:05:02,000
그리고 ls 프로그램을 이 파일에 연결합니다

53
00:05:02,000 --> 00:05:07,000
반면, 리다이렉션을 했더라도, ls는 에러 메시지를 출력합니다

54
00:05:07,000 --> 00:05:10,000
지금 우리는 stdout이 아닌 stderr에 있습니다

55
00:05:10,000 --> 00:05:16,000
그리고 이 >는 오직 stdout만 리다이렉트합니다

56
00:05:16,000 --> 00:05:28,000
만약 에러 출력값을 리다이렉트하고 싶다면 2와 error.log를 사용해야 합니다

57
00:05:28,000 --> 00:05:39,000
여기 제 에러가 제대로 된 곳으로 보내졌네요

58
00:05:39,000 --> 00:05:44,000
마지막 예시로 돌아가 봅시다

59
00:05:44,000 --> 00:05:48,000
제 stdout을 grep으로 보내고 싶어요

60
00:05:48,000 --> 00:05:51,000
그리고 stderr는 error.log로 리다이렉트하고 싶어요

61
00:05:51,000 --> 00:05:58,000
그러기 위해선 ls가 문자열을 stdout와 stderr 양쪽에 보내도록 해야 합니다

62
00:05:58,000 --> 00:06:06,000
존재하지 않는 파일과 존재하는 파일을 둘 다 요청해봅시다

63
00:06:06,000 --> 00:06:10,000
test* 같은 것으로 말이죠

64
00:06:10,000 --> 00:06:15,000
여기 두 문장이 출력되어 있습니다

65
00:06:15,000 --> 00:06:18,000
전자는 에러입니다, ls는 나타난 순서대로 처리하기 때문입니다

66
00:06:18,000 --> 00:06:28,000
후자는 쉘이 test*를 다른 두 파일로 대체한 결괏값입니다

67
00:06:28,000 --> 00:06:36,000
이제 에러를 error.log로 리다이렉트합니다

68
00:06:36,000 --> 00:06:43,000
에러는 error.log로 보내졌습니다

69
00:06:43,000 --> 00:06:50,000
일반 출력값은 올바르게 표시되어 있습니다

70
00:06:50,000 --> 00:06:53,000
이제 다음에 뭘 할지 눈치를 채셨을 수도 있겠군요

71
00:06:53,000 --> 00:06:59,000
동일한 절차로 이제 stdout을 리다이렉트할 거예요

72
00:06:59,000 --> 00:07:07,000
|을 사용해 파일이 아닌 프로그램에 리다이렉트한다고 말해줍니다

73
00:07:07,000 --> 00:07:18,000
예컨대 이제 grep에게 test.txt와 일치하는 것만 걸러달라고 할 수 있습니다

74
00:07:18,000 --> 00:07:25,000
이런 경우 두 결괏값을 필터링하여 오직 하나만 남겨둡니다

75
00:07:25,000 --> 00:07:32,000
그리고 error.log에 에러가 들어갑니다

76
00:07:32,000 --> 00:07:40,000
이 모든 것들은 이 다이어그램과 일치합니다

77
00:07:40,000 --> 00:07:46,000
우리는 이제 명령어를 중첩해서 쓸 수 있습니다

78
00:07:46,000 --> 00:07:51,000
예를 들어 cat에 제 파일을 입력하여 출력값을 얻어 봅시다

79
00:07:51,000 --> 00:07:57,000
이것을 grep을 이용해 Joker라는 단어로 거르고

80
00:07:57,000 --> 00:08:00,000
wc를 통해 몇 줄이나 있는지 세봅시다

81
00:08:00,000 --> 00:08:07,000
이제 cat과 grep과 wc를 연결했습니다

82
00:08:07,000 --> 00:08:09,000
분해할 수도 있습니다

83
00:08:09,000 --> 00:08:12,000
cat batman.txt를 하면

84
00:08:12,000 --> 00:08:16,000
batman 파일의 전문이 출력됩니다

85
00:08:16,000 --> 00:08:27,000
|를 이용하여 grep Joker를 추가하면 Joker가 포함된 줄만 출력됩니다

86
00:08:27,000 --> 00:08:37,000
이제 이 결괏값의 개수를 세고 싶어요

87
00:08:37,000 --> 00:08:43,000
파이프(|)는 여러 명령어를 실행하고 함께 사용할 때 굉장히 유용합니다

88
00:08:43,000 --> 00:08:50,000
조금 다르게 할 수도 있어요

89
00:08:50,000 --> 00:08:54,000
>는 stdout을 파일에 리다이렉트합니다

90
00:08:54,000 --> 00:08:58,000
<는 그 반대의 경우로 동작하겠죠

91
00:08:58,000 --> 00:09:01,000
파일에서 stdout을 가져옵니다

92
00:09:01,000 --> 00:09:07,000
Batman.txt를 리다이렉트할 수 있고 이건 grep을 통한 stdout이라고 말할 수 있습니다

93
00:09:07,000 --> 00:09:11,000
이건 cat batman.txt와 동일해요

94
00:09:11,000 --> 00:09:15,000
이전의 명령어를 다시 사용할 수 있습니다

95
00:09:15,000 --> 00:09:24,000
이건 배트맨 파일에서 조커를 걸러낸 겁니다

96
00:09:24,000 --> 00:09:32,000
데이터를 추가함으로써 다른 방법으로 진행할 수도 있습니다

97
00:09:32,000 --> 00:09:38,000
첫 번째 예시로 돌아가 보죠

98
00:09:38,000 --> 00:09:43,000
res.txt에 ls의 stdout을 보냈습니다

99
00:09:43,000 --> 00:09:45,000
뭐가 들어있나 봅시다

100
00:09:45,000 --> 00:09:52,000
이제 우리 파일에 요소를 추가할 수 있습니다

101
00:09:52,000 --> 00:09:55,000
먼저 반례를 보여드릴게요

102
00:09:55,000 --> 00:10:00,000
만약 제가 이 파일을 다시 작성하면 내용이 덮어씌워 질 것입니다

103
00:10:00,000 --> 00:10:08,000
echo의 stdout으로 내용물을 교체해 보겠습니다

104
00:10:08,000 --> 00:10:11,000
보시다시피, res는 이 파일들을 다 가지고 있었습니다

105
00:10:11,000 --> 00:10:16,000
이제는 coucou만 가지고 있죠

106
00:10:16,000 --> 00:10:20,000
이럴 경우를 방지하기 위해 더블 >>를 사용하면 파일에 내용을 추가할 수 있습니다

107
00:10:20,000 --> 00:10:26,000
기존의 내용을 유지하면서요

108
00:10:26,000 --> 00:10:34,000
>>를 사용할 때마다 파일에 다른 것들을 추가할 거예요

109
00:10:34,000 --> 00:10:40,000
반대로 <<는 조금 다릅니다

110
00:10:40,000 --> 00:10:50,000
잠시만요, 파일에 쓰도록 쉘에게 요청할 겁니다

111
00:10:50,000 --> 00:10:56,000
키워드까지의 stdout을 받아오도록 말이죠

112
00:10:56,000 --> 00:11:01,000
우리의 키워드는 FIN이라는 단어예요

113
00:11:01,000 --> 00:11:12,000
이제 모종의 텍스트를 쓸 수 있어요

114
00:11:12,000 --> 00:11:20,000
쉘이 멈췄군요, 제가 쓴 모든 것들을 챙겨서 cat에 보낼 거예요

115
00:11:20,000 --> 00:11:28,000
마지막 명령어는 두 결괏값을 하나로 합쳐줄 겁니다

116
00:11:28,000 --> 00:11:40,000
여기 우리의 예시에서 ls의 결괏값은 grep되거나 error.log 파일로 보내지길 원해요

117
00:11:40,000 --> 00:11:44,000
그래서 만약 모든 것을 error.log로 보내고자 한다면

118
00:11:44,000 --> 00:11:50,000
ls bonjour *.txt를 합니다

119
00:11:50,000 --> 00:11:53,000
이 stderr를 stdout으로 리다이렉트하도록 요청합니다

120
00:11:53,000 --> 00:12:04,000
이건 좀 이상한 표기법이에요, 기술적인 이유로 마지막에 있어야 하거든요

121
00:12:04,000 --> 00:12:15,000
resultat.txt로 리다이렉트합니다

122
00:12:15,000 --> 00:12:19,000
stdout도 stderr도 아무것도 출력되지 않았어요

123
00:12:19,000 --> 00:12:22,000
이제 제 resultat 파일을 확인해봅시다

124
00:12:22,000 --> 00:12:29,000
안에 에러와 정상적인 결괏값이 다 있네요

125
00:12:29,000 --> 00:59:59,000
이게 리다이렉트에 대한 이 비디오의 마지막입니다
<< translated by mseo, ji-kim, yeslee, mki, and inyang :) >>
