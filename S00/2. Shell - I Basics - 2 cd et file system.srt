1
00:00:01,000 --> 00:00:04,000
UNIX 파일 시스템에 관해서 이야기해봅시다

2
00:00:04,000 --> 00:00:12,000
파일 시스템을 통해 하드 디스크와 작업 공간에 파일을 저장할 수 있습니다

3
00:00:12,000 --> 00:00:20,000
첫 번째로 pwd는 당신이 파일 시스템의 어디에 있는지 알려주는 명령어입니다

4
00:00:20,000 --> 00:00:23,000
파일 시스템을 통해 하드 디스크와 작업 공간에 파일을 저장할 수 있습니다

5
00:00:23,000 --> 00:00:26,000
파일 시스템은 슬래시(/)로 표현되는 루트 디렉토리에 도달할 때까지

6
00:00:26,000 --> 00:00:30,000
다른 디렉토리에 포함될 수 있는 디렉토리로 설계됩니다

7
00:00:30,000 --> 00:00:33,000
디렉토리를 변경할 때마다 슬래시로 구분됩니다

8
00:00:33,000 --> 00:00:38,000
예를 들어, 우리는 지금 42 디렉토리에 포함된

9
00:00:38,000 --> 00:00:40,000
shell 디렉토리에 있습니다

10
00:00:40,000 --> 00:00:42,000
이건 다시 users 디렉토리에 포함되어 있고

11
00:00:42,000 --> 00:00:45,000
그건 다시 루트 디렉토리에 포함되어 있죠

12
00:00:45,000 --> 00:00:47,000
일단 디렉토리의 내용을 좀 보죠

13
00:00:47,000 --> 00:00:52,000
그리고 이 안에 디렉토리를 추가해볼 거예요

14
00:00:52,000 --> 00:00:59,000
이를 위해 mkdir 명령어를 사용해서 디렉토리를 만들어줄 건데

15
00:00:59,000 --> 00:01:02,000
디렉토리의 이름을 매개 변수로 줄 수 있습니다, 예를 들어 toto 라고 지어볼게요

16
00:01:02,000 --> 00:01:09,000
결과를 확인해 보면 toto라는 이름의 새 파일을 볼 수 있습니다

17
00:01:09,000 --> 00:01:16,000
하지만 여기에서는 표준 파일과의 차이점을 구분하기가 어렵습니다

18
00:01:16,000 --> 00:01:18,000
이를 확인할 방법이 두 가지 있습니다

19
00:01:18,000 --> 00:01:23,000
ls에 -p 옵션을 넣으면 디렉토리에 슬래시를 추가해서 볼 수 있습니다

20
00:01:23,000 --> 00:01:30,000
또한 ls -l을 사용하여 각 파일의 세부 정보가 포함된

21
00:01:30,000 --> 00:01:35,000
긴 목록을 볼 수 있습니다

22
00:01:35,000 --> 00:01:51,000
toto 파일의 첫 번째 문자는 디렉토리 유형을 나타내는 d입니다

23
00:01:51,000 --> 00:01:55,000
우리는 이 파일 시스템에서 탐색할 수 있습니다

24
00:01:55,000 --> 00:02:00,000
cd 명령어를 이용하여 디렉토리를 변경하여 toto로 이동할 수 있고

25
00:02:00,000 --> 00:02:10,000
pwd 명령어를 이용하여 위치를 확인하면 우리가 현재 toto 디렉토리에 있음을 알 수 있습니다

26
00:02:10,000 --> 00:02:13,000
이제 조금 더 복잡한 걸 해볼게요

27
00:02:13,000 --> 00:02:19,000
만약 ls에 a 옵션을 준다면 숨겨진 파일을 볼 수 있습니다

28
00:02:19,000 --> 00:02:23,000
Unix 환경에서 숨겨진 파일은 마침표(.)로 시작합니다

29
00:02:23,000 --> 00:02:30,000
이미 toto 디렉토리에 두 개의 파일이 있음을 볼 수 있습니다

30
00:02:30,000 --> 00:02:38,000
왜일까요? 시스템이 디렉토리를 생성할 때마다 두 개의 특수 파일이 생성됩니다

31
00:02:38,000 --> 00:02:42,000
점 한 개(.)는 디렉토리 자신을 나타내고

32
00:02:42,000 --> 00:02:46,000
점 두 개(..)는 부모 디렉토리를 나타냅니다

33
00:02:46,000 --> 00:02:50,000
그렇기 때문에 만약 디렉토리 . 으로 이동하려 해도

34
00:02:50,000 --> 00:02:55,000
이동하지 않습니다, 왜냐면 .은 toto 그 자체니까요

35
00:02:55,000 --> 00:02:59,000
하지만 .. 으로 이동하려고 하면

36
00:02:59,000 --> 00:03:03,000
shell 디렉토리로 이동했음을 볼 수 있습니다

37
00:03:03,000 --> 00:03:08,000
더 간단하게 진행할 수 있었지만, 설명에 많은 시간을 들였네요

38
00:03:08,000 --> 00:03:13,000
여기 요약 설명을 할게요, 일단 ctrl + L 해서 화면을 깔끔하게 만듭니다

39
00:03:13,000 --> 00:03:19,000
현재 저는 /Users/studios_42/shell에 있습니다

40
00:03:19,000 --> 00:03:24,000
하위 디렉토리로 toto를 가지고 있습니다

41
00:03:24,000 --> 00:03:30,000
toto로 가기 위해 디렉토리의 전체 경로를 써볼게요

42
00:03:30,000 --> 00:03:39,000
Tab 키를 이용하면 조금 더 쉽게 완성할 수 있습니다

43
00:03:39,000 --> 00:03:42,000
toto에 도착했습니다

44
00:03:42,000 --> 00:03:45,000
pwd를 이용해 제가 toto에 있음을 확인할 수 있고

45
00:03:45,000 --> 00:03:48,000
다시 이전 디렉토리로 돌아가려면

46
00:03:48,000 --> 00:03:51,000
예전에 쓴 기록을 불러와서

47
00:03:51,000 --> 00:03:57,000
toto를 지우면 shell 디렉토리로 돌아올 수 있습니다

48
00:03:57,000 --> 00:04:03,000
하지만 여러분도 cd ..를 사용하는 것이 더 간단하다는 점에 동의하실 겁니다

49
00:04:03,000 --> 00:04:12,000
물론 디렉토리는 rmdir 명령어를 이용하여

50
00:04:12,000 --> 00:04:17,000
제거될 수 있습니다

51
00:04:17,000 --> 00:04:24,000
rmdir 명령어가 작동하려면 그 디렉토리는 무조건 비어있어야 합니다, 지금 이 예제처럼요

52
00:04:24,000 --> 00:04:28,000
맨 끝의 슬래시 (/) 는 있어도 없어도 차이가 없습니다

53
00:04:28,000 --> 00:59:59,000
이것으로 여러 명령어에 대한 설명을 마치겠습니다
<< translated by inyang, ji-kim, mki, yeslee, and mseo :D >>
