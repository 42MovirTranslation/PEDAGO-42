1
00:00:01,000 --> 00:00:07,000
이번 영상에서는 git을 remote(원격) 서버와 함께 사용하는 법을 보여드리겠습니다

2
00:00:07,000 --> 00:00:13,000
지금까지는 로컬에서만 작업했습니다, 어느 정도 유용했지만

3
00:00:13,000 --> 00:00:16,000
다른 사람과 작업할 순 없었죠

4
00:00:16,000 --> 00:00:20,000
만약 누군가가 당신과 일하고 싶다면 git을 복사해야 합니다

5
00:00:20,000 --> 00:00:24,000
하지만 같이 일할 수 있도록 공유하는 공간이 없었죠

6
00:00:24,000 --> 00:00:27,000
이제 원격 서버로 작업하는 방법을 보여드리겠습니다

7
00:00:27,000 --> 00:00:30,000
어떻게 할까요? 먼저 원격 서버를 가져와야 합니다

8
00:00:30,000 --> 00:00:35,000
제가 직접 원격 서버를 만드는 방법도 있지만

9
00:00:35,000 --> 00:00:40,000
이미 유명한 github를 써도 되지요

10
00:00:40,000 --> 00:00:45,000
github에서 원격 repository(저장소)를 만들었습니다

11
00:00:45,000 --> 00:00:50,000
이것을 어떻게 추가하는 지 보여드리죠

12
00:00:50,000 --> 00:00:57,000
현재 저는 git의 branch master에 있군요, 좋아요

13
00:00:57,000 --> 00:01:04,000
git log을 통해 제가 어디에 있는지 확인하고요, 좋습니다

14
00:01:04,000 --> 00:01:08,000
자, 그래서 원격 서버는 어떻게 추가할까요?

15
00:01:08,000 --> 00:01:11,000
git remote라는 명령어를 쓰면 됩니다

16
00:01:11,000 --> 00:01:14,000
이 명령어는 원격 서버들을 관리합니다

17
00:01:14,000 --> 00:01:18,000
그럼 원격 서버를 추가해보겠습니다

18
00:01:18,000 --> 00:01:21,000
여기서 바로 엔터를 누르면 이 명령어를 어떻게 사용하는지 보여줍니다

19
00:01:21,000 --> 00:01:23,000
git remote add, 그 다음에 이름과 주소

20
00:01:23,000 --> 00:01:26,000
이름으론 origin을 쓰겠습니다

21
00:01:26,000 --> 00:01:28,000
사실 아무 이름이나 사용해도 상관 없어요

22
00:01:28,000 --> 00:01:35,000
하지만 origin이 기본 원격 서버를 위한 기본 이름인 이유가 있습니다

23
00:01:35,000 --> 00:01:40,000
그러니 되도록이면 origin을 쓰길 권장합니다

24
00:01:40,000 --> 00:01:43,000
예시로 git clone 명령어가 있지요

25
00:01:43,000 --> 00:01:48,000
이 명령어는 기본값으로 origin에 원격 저장소의 url를 담습니다

26
00:01:48,000 --> 00:01:51,000
이 예시는 3분 뒤에 보여드리죠

27
00:01:51,000 --> 00:01:54,000
어쨌든 이것은 끝났으니 git branch를 해봅시다

28
00:01:54,000 --> 00:01:56,000
여전히 dev와 master가 있군요, 문제 없어요

29
00:01:56,000 --> 00:02:00,000
git branch -a를 해 보겠습니다, 좋아요

30
00:02:00,000 --> 00:02:06,000
이제 제 로컬 branch를 원격 저장소로 push할 겁니다

31
00:02:06,000 --> 00:02:08,000
어떻게 하냐고요?

32
00:02:08,000 --> 00:02:13,000
git push를 합니다

33
00:02:13,000 --> 00:02:15,000
push 하고 싶은 곳을 이어서 쓰면 되지요

34
00:02:15,000 --> 00:02:17,000
그냥 여기서 git push를 해 보면

35
00:02:17,000 --> 00:02:22,000
제 로컬 branch가 원격 branch와 연결되어 있지 않다고 하네요

36
00:02:22,000 --> 00:02:24,000
그럼 이렇게 하면 안 되겠군요

37
00:02:24,000 --> 00:02:28,000
알려주니 좋네요

38
00:02:28,000 --> 00:02:31,000
대신 git push origin master를 해 봅시다

39
00:02:31,000 --> 00:02:40,000
git push, push하고 싶은 주소, 그리고 어느 원격 branch인지를 쓰는 겁니다

40
00:02:40,000 --> 00:02:46,000
git은 똑똑하니 잘 알아들었을 겁니다, 이제 데이터를 전송합니다

41
00:02:46,000 --> 00:02:49,000
새로운 branch인 master를 만들었군요

42
00:02:49,000 --> 00:02:52,000
이제 실존하는 원격 branch를 생성했습니다

43
00:02:52,000 --> 00:02:54,000
git branch -a를 해보면

44
00:02:54,000 --> 00:02:58,000
remotes에 origin master가 있는 걸 확인할 수 있죠

45
00:02:58,000 --> 00:03:02,000
origin master는 로컬 branch가 아닙니다

46
00:03:02,000 --> 00:03:04,000
하지만 로컬 형태의 branch로도 가지고 있죠

47
00:03:04,000 --> 00:03:12,000
클론을 만듦으로써 증명해보겠습니다

48
00:03:12,000 --> 00:03:15,000
제가 두 번째 사용자라 치고 git clone을 한다고 합시다

49
00:03:15,000 --> 00:03:22,000
git clone을 이용하면 git 저장소를 가져올 수 있습니다

50
00:03:22,000 --> 00:03:27,000
이제 demo 디렉토리에 있는 git 저장소를 클론합니다

51
00:03:27,000 --> 00:03:31,000
이렇게 하면 됩니다

52
00:03:31,000 --> 00:03:33,000
이 디렉토리로 들어가서 git status를 입력하면

53
00:03:33,000 --> 00:03:36,000
제가 지금 branch master에 있다고 하네요

54
00:03:36,000 --> 00:03:39,000
git branch를 해보면 branch master만 있군요

55
00:03:39,000 --> 00:03:40,000
with git branch -a,
git branch -a를 하면

56
00:03:40,000 --> 00:03:48,000
branch master뿐만 아니라 origin/HEAD 라는 것도 표시됩니다, 이건 나중에 설명해 드리죠

57
00:03:48,000 --> 00:03:50,000
그리고 branch master에 조금 다른 게 있군요

58
00:03:50,000 --> 00:03:52,000
여기를 보시면 제 branch는 origin master의 최신 버전으로 맞춰져 있습니다

59
00:03:52,000 --> 00:03:58,000
이것은 이쪽의 set upstream 때문인데요

60
00:03:58,000 --> 00:04:00,000
기본값으로 로컬 branch의 구성을 가져가서

61
00:04:00,000 --> 00:04:03,000
원격 branch에 적용했기 때문이지요

62
00:04:03,000 --> 00:04:07,000
그러니까 예를 들어 toto를

63
00:04:07,000 --> 00:04:09,000
lolilolo로 수정하고

64
00:04:09,000 --> 00:04:20,000
git add하고 git commit

65
00:04:20,000 --> 00:04:23,000
git push까지 하면 잘 동작합니다

66
00:04:23,000 --> 00:04:26,000
제 로컬 branch가 원격 branch와 연결된 것을 알기 때문이죠

67
00:04:26,000 --> 00:04:29,000
그러니 이제는 git push origin master라고 다 칠 필요가 없습니다

68
00:04:29,000 --> 00:04:31,000
이쪽 창으로 돌아와서 git log를 해보면

69
00:04:31,000 --> 00:04:46,000
모든 branch들과 제가 만든 commit 등등이 다 잘 있네요

70
00:04:46,000 --> 00:04:49,000
다른 창에서도 똑같이 해보면

71
00:04:49,000 --> 00:04:52,000
로컬에 master, origin master와 dev가 있는 게 보이죠

72
00:04:52,000 --> 00:04:55,000
로컬인 dev는 push 되지 않았습니다

73
00:04:55,000 --> 00:05:01,000
여기엔 로컬로 존재하지만 다른 창에는 없지요

74
00:05:01,000 --> 00:05:08,000
한번도 push되지 않았기 때문에 원격 저장소에서 생성되지 않은 겁니다

75
00:05:08,000 --> 00:05:10,000
이 부분이 아주 중요한 포인트입니다, 로컬 데이터와 원격 데이터는 다릅니다

76
00:05:10,000 --> 00:05:14,000
그리고 사용자가 지속적으로 둘의 상태를 같게 맞춰줘야 합니다

77
00:05:14,000 --> 00:05:18,000
왼쪽에 보시다시피 origin/master은 아직도 c13baf에 있습니다

78
00:05:18,000 --> 00:05:25,000
하지만 이건 맞지 않죠, 오른쪽을 보면 추가로 commit한 내용이 있으니까요

79
00:05:25,000 --> 00:05:28,000
이것을 왼쪽 창에서 확인하는 방법은 git fetch를 쓰는 것입니다

80
00:05:28,000 --> 00:05:33,000
git fetch를 사용하면 원격 데이터를 다른 branch들에 가져올 수 있습니다

81
00:05:33,000 --> 00:05:40,000
이번 경우에는 현재 branch인 master겠죠

82
00:05:40,000 --> 00:05:44,000
git fetch --all을 사용해서 원격 branch들에 있는 모든 데이터를 찾아봅니다

83
00:05:44,000 --> 00:05:47,000
그렇게 master를 가져왔고 이제 git log를 해보면

84
00:05:47,000 --> 00:05:53,000
로컬 master가 있는 게 보이지만 원격 master는 없습니다

85
00:05:53,000 --> 00:05:57,000
다른 commit에 있지요

86
00:05:57,000 --> 00:06:00,000
git log origin/master를 하면

87
00:06:00,000 --> 00:06:06,000
제가 위치한 이곳을 보여줍니다

88
00:06:06,000 --> 00:06:08,000
만약 업데이트를 하고 싶다면 어떻게 해야 할까요?

89
00:06:08,000 --> 00:06:14,000
git rebase를 사용하면 됩니다

90
00:06:14,000 --> 00:06:22,000
origin/master를 제 master에 rebase(한 브랜치에 변경된 사항을 다른 브랜치에 적용)합니다

91
00:06:22,000 --> 00:06:26,000
git log을 해보면 어떻게 됐는지 보여주죠, 좋아요

92
00:06:26,000 --> 00:06:32,000
이제 왼쪽 창과 오른쪽 창이 똑같아졌습니다

93
00:06:32,000 --> 00:06:35,000
fetch와 rebase 그리고 fetch와 merge 중에

94
00:06:35,000 --> 00:06:38,000
선택할 수 있는 명령어가 있습니다

95
00:06:38,000 --> 00:06:42,000
git pull이라고 하죠

96
00:06:42,000 --> 00:06:45,000
사용법을 보여드리기 위해서 일단 파일 하나를 수정할게요

97
00:06:45,000 --> 00:06:48,000
다시 한번 toto를 수정하겠습니다

98
00:06:48,000 --> 00:06:51,000
add하고 commit하고

99
00:06:51,000 --> 00:06:56,000
push합니다

100
00:06:56,000 --> 00:07:01,000
이제 왼쪽에서 git pull을 합니다

101
00:07:01,000 --> 00:07:07,000
git pull만 입력하면 알아서 fetch와 merge를 진행합니다

102
00:07:07,000 --> 00:07:10,000
git pull --rebase라고 입력하면 fetch와 rebase를 진행하죠

103
00:07:10,000 --> 00:07:14,000
저는 --rebase를 쓰라고 권하고 싶군요

104
00:07:14,000 --> 00:07:18,000
그러면 몇가지 문제가 생기는 것을 방지할 수 있거든요

105
00:07:18,000 --> 00:07:25,000
하지만 어떤 방식으로 작업하느냐에 달렸죠, 어떤 회사에서 일하는지도 그렇고요

106
00:07:25,000 --> 00:07:29,000
rebase를 사용하면 commit을 merge하지 않기 때문에 저는 권장합니다

107
00:07:29,000 --> 00:07:34,000
그렇게 하면 branch들이 master와 다른 branch로 왔다갔다하는 것을 막을 수 있거든요

108
00:07:34,000 --> 00:07:39,000
뭐, 편한대로 하십쇼

109
00:07:39,000 --> 00:07:48,000
그럼 fetch와 rebase를 해 보겠습니다

110
00:07:48,000 --> 00:07:54,000
재밌는 일이 일어나고 있네요, fetch는 했지만

111
00:07:54,000 --> 00:07:56,000
rebase는 성공하지 못했습니다

112
00:07:56,000 --> 00:08:02,000
왜냐하면 왼쪽의 로컬 master는 오른쪽의 원격 branch와 연관되어 있지 않기 때문이지요

113
00:08:02,000 --> 00:08:07,000
무엇과 rebase해야 하는지 모르는 거죠

114
00:08:07,000 --> 00:08:14,000
git pull --rebase origin master을 통해 rebase 대상을 알려줄 수 있습니다

115
00:08:14,000 --> 00:08:20,000
여기에 나온 대로 set upstream 옵션을 쓸 수도 있습니다

116
00:08:20,000 --> 00:08:25,000
이렇게 업데이트 되었고 양쪽이 같은 것을 알 수 있습니다

117
00:08:25,000 --> 00:08:32,000
fetch하고 rebase가 잘 되었다는 것이죠

118
00:08:32,000 --> 00:08:36,000
이제 마지막으로 set upstream 어쩌구를 쓰는 대신에

119
00:08:36,000 --> 00:08:44,000
처음에 push할 때나 아무때나 이 옵션을 넣으면 됩니다

120
00:08:44,000 --> 00:08:54,000
먼저 pouet을 열어

121
00:08:54,000 --> 00:08:59,000
값을 32로 수정하고

122
00:08:59,000 --> 00:09:04,000
git add pouet한 뒤 "pouet to 32"라는 이름으로 commit을 합니다

123
00:09:04,000 --> 00:09:11,000
이제 git push -u origin master을 할게요

124
00:09:11,000 --> 00:09:22,000
이걸 push하면 로컬 branch가 원격 branch를 따를 것이라는 뜻입니다

125
00:09:22,000 --> 00:09:29,000
좋아요, branch master가 원격 branch master를 origin을 통해 추적할 것이라고 쓰여있죠

126
00:09:29,000 --> 00:09:34,000
에러는 없고요, 모든 것은 업데이트 되어 있군요, 좋아요

127
00:09:34,000 --> 00:09:37,000
요약하자면 원격 저장소의 데이터를

128
00:09:37,000 --> 00:09:40,000
가져오는 유일한 방법은 fetch 명령어를 쓰는 것입니다

129
00:09:40,000 --> 00:09:45,000
사실 유일한 방법은 아니군요

130
00:09:45,000 --> 00:09:49,000
fetch는 원격 저장소에서 데이터를 가져옵니다

131
00:09:49,000 --> 00:09:59,000
일단 데이터를 가져오면 로컬에는 origin/master와 master라는 branch가 있고요

132
00:09:59,000 --> 00:10:04,000
이들은 현재 모두 로컬에 있습니다

133
00:10:04,000 --> 00:10:08,000
master나 origin/master에 있는 무언가를 망가트렸다면

134
00:10:08,000 --> 00:10:10,000
그건 로컬에서만 일어납니다

135
00:10:10,000 --> 00:10:14,000
원격 branch에는 아무런 타격이 없지요

136
00:10:14,000 --> 00:10:22,000
하지만 그 상태로 push를 한다면 원격 버전도 망가지죠

137
00:10:22,000 --> 00:10:24,000
이것이 git에 대한 마지막 영상입니다

138
00:10:24,000 --> 00:10:27,000
우리가 이제껏 배운 명령어들의 man을 모조리 읽어보시길 추천드립니다

139
00:10:27,000 --> 00:10:33,000
다른 git 명령어들도 존재하고 그에 대한 정보를 담은 무수히 많은 웹사이트들이 있지요

140
00:10:33,000 --> 00:10:40,000
git -a나 git -p같은 유용한 옵션들도 아주 많습니다

141
00:10:40,000 --> 06:00:00,000
git는 오래도록 유용할 겁니다, 특히 인터넷으로 프로젝트를 할 때 말이죠
translated by inyang, mseo, mki,  yeslee, and ji-kim :D
