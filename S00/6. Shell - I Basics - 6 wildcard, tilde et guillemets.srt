1
00:00:01,000 --> 00:00:06,000
이번 비디오에서는 쉘 메타 문자에 관해 이야기해보겠습니다

2
00:00:06,000 --> 00:00:10,000
메타 문자는 쉘에서 사용하는 특수한 문자입니다

3
00:00:10,000 --> 00:00:16,000
대체된 문자 혹은 대체 문자 억제제로 취급되죠

4
00:00:16,000 --> 00:00:20,000
이것들이 무엇인지 설명하기 위해 예시를 들어보겠습니다

5
00:00:20,000 --> 00:00:25,000
txt 파일들을 처리하고 싶을 때

6
00:00:25,000 --> 00:00:32,000
이 작업을 수행하는 방법은 여러 가지가 있습니다

7
00:00:32,000 --> 00:00:37,000
조금 지루할 수 있지만 파일명을 모두 적는 방법이 그중 하나죠

8
00:00:37,000 --> 00:00:40,000
wc 명령어는 내 모든 파일을 분석합니다

9
00:00:40,000 --> 00:00:45,000
모든 txt 파일에 대한 정보를 이런 식으로 요청할 수 있습니다

10
00:00:45,000 --> 00:00:51,000
* 문자를 사용하면 모든 .txt 파일을 볼 수 있고

11
00:00:51,000 --> 00:01:00,000
이 표현(*.txt)과 일치하는 현재 디렉토리의 모든 파일을 매칭 할 수 있습니다

12
00:01:00,000 --> 00:01:07,000
*을 batman으로 대체할 수도 있고 이 또한 당연히 동작합니다

13
00:01:07,000 --> 00:01:12,000
* 이 다른 것들을 대체하게 하는 것은 shell일까요, 아니면 wc 명령어일까요?

14
00:01:12,000 --> 00:01:19,000
wc에서 *.txt를 수신하였고 파일 시스템에서 해당 파일을 검색했습니다

15
00:01:19,000 --> 00:01:25,000
그리고 이를 echo 명령어로 확인할 수 있습니다, echo 명령어는 오직 표시만을 할 뿐 파일에 영향을 주지 않습니다

16
00:01:25,000 --> 00:01:32,000
echo *.txt를 입력하면 실제 파일 목록을 볼 수 있습니다

17
00:01:32,000 --> 00:01:35,000
이건 shell에서 *이 다른 것을 대체하기 때문입니다

18
00:01:35,000 --> 00:01:41,000
echo를 실행하기 전에 shell이 대체할 내용을 제공합니다

19
00:01:41,000 --> 00:01:54,000
그리고 라인을 그 안에 있는 파일들로 교체하죠

20
00:01:54,000 --> 00:01:56,000
대체를 사용하는 또 다른 방식이 있습니다

21
00:01:56,000 --> 00:02:00,000
?를 사용하여 문자를 임의의 문자로 대체할 수 있습니다, 다만 단 한 개의 문자만 가능합니다

22
00:02:00,000 --> 00:02:10,000
t 하나를 입력한 뒤 물음표를 3개 입력하면

23
00:02:10,000 --> 00:02:12,000
t로 시작하여 아무 문자가 3개 나열되고 .txt로 끝나는 모든 파일을 나타냅니다

24
00:02:12,000 --> 00:02:18,000
test.txt와 truc.txt를 볼 수 있죠, 하지만 testing.txt는 볼 수 없을 겁니다

25
00:02:18,000 --> 00:02:28,000
t*.txt를 쓸 수도 있습니다, *는 몇 개의 문자라도 대체할 수 있습니다

26
00:02:28,000 --> 00:02:34,000
결과를 보면 *가 어떤 문자로든 대체될 수 있음을 알 수 있습니다

27
00:02:34,000 --> 00:02:45,000
*는 빈 체인으로도 대체되기 때문에 test*.txt를 치면 test와 testing이 모두 나타납니다

28
00:02:45,000 --> 00:02:50,000
대체할 수 있는 또 다른 문자로는 '~' 가 있습니다

29
00:02:50,000 --> 00:02:58,000
이 계정의 루트 디렉토리를 나타내는 것을 볼 수 있습니다

30
00:02:58,000 --> 00:03:06,000
이 기능은 계정의 이름을 미리 알지 못해도

31
00:03:06,000 --> 00:03:09,000
환경에서 스크립트나 명령을 실행할 수 있기 때문에 유용합니다

32
00:03:09,000 --> 00:03:12,000
그저 ~ 문자를 사용하면 됩니다

33
00:03:12,000 --> 00:03:25,000
예를 들어 이런 식으로 경로를 구성할 수 있습니다

34
00:03:25,000 --> 00:03:33,000
하지만 대체 없이 ~ 나 *같은 문자를 온전히 사용할 수는 없을까요?

35
00:03:33,000 --> 00:03:36,000
예를 들어 echo *를 입력하면

36
00:03:36,000 --> 00:03:39,000
*는 표시되지 않습니다

37
00:03:39,000 --> 00:03:45,000
쉘은 *을 모든 문자에 해당하는 파일로 대체합니다

38
00:03:45,000 --> 00:03:51,000
따라서 ls와 동일한 결과를 보여줍니다

39
00:03:51,000 --> 00:03:56,000
echo *가 ls와 동일한 결과를 보여주는 것을 확인할 수 있습니다

40
00:03:56,000 --> 00:03:59,000
*를 * 자체로 보여주기 위해

41
00:03:59,000 --> 00:04:01,000
사용할 수 있는 가장 간단한 방법은

42
00:04:01,000 --> 00:04:03,000
작은따옴표('')를 사용하는 것입니다

43
00:04:03,000 --> 00:04:07,000
echo '*'를 입력하면

44
00:04:07,000 --> 00:04:12,000
따옴표 사이의 모든 글자는 대체되지 않습니다

45
00:04:12,000 --> 00:04:18,000
큰따옴표를 사용할 수도 있습니다

46
00:04:18,000 --> 00:04:23,000
혹은 단일문자의 경우 백슬래시(\)를 사용할 수도 있습니다

47
00:04:23,000 --> 00:04:30,000
하지만 다른 문자를 추가하려면 백슬래시를 다시 사용해야 합니다

48
00:04:30,000 --> 00:04:38,000
어쨌든 따옴표를 사용하면 됩니다

49
00:04:38,000 --> 00:04:41,000
왜 작은따옴표와 큰따옴표를 둘 다 사용하는 걸까요?

50
00:04:41,000 --> 00:04:43,000
둘이 약간의 차이가 있기 때문입니다

51
00:04:43,000 --> 00:04:47,000
환경 변수로 $truc를 쓸 경우

52
00:04:47,000 --> 00:04:55,000
쉘이 변수 내용으로 대체되는 것을 볼 수 있습니다

53
00:04:55,000 --> 00:05:01,000
큰따옴표를 사용하면 내용은 표시되지만 *는 대체되지 않습니다

54
00:05:01,000 --> 00:05:16,000
작은따옴표를 사용하면 $를 포함한 모든 문자가 대체되지 않습니다

55
00:05:16,000 --> 00:59:59,000
이것으로 쉘 메타 문자에 대한 비디오를 마칩니다
<< translated by inyang, ji-kim, yeslee, mki and mseo :) >>
