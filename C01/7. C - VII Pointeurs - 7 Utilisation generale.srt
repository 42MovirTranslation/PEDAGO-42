1
00:00:00,000 --> 00:00:03,659
이 비디오에서는 포인터의 두 가지 용도에 대해 알아볼 겁니다

2
00:00:03,659 --> 00:00:06,029
포인터를 이해하는 데에 중요한 두 가지 요소는 다음과 같습니다

3
00:00:06,029 --> 00:00:09,150
포인터를 어떻게 사용하는지와 널 포인터가 무엇인지
이게 바로 중요한 두 가지 요소입니다

4
00:00:09,150 --> 00:00:12,450
지금부터 보여드리겠습니다
우선 포인터를 어떻게 사용할까요?

5
00:00:12,450 --> 00:00:16,049
가장 고전적으로 사용되는 예시를 통해 보여드릴게요

6
00:00:16,049 --> 00:00:20,490
main에 정의한 int a가 있습니다

7
00:00:20,490 --> 00:00:24,269
42라는 값을 가지고 있죠 (a = 42)

8
00:00:24,269 --> 00:00:28,410
그리고  fct 함수에 인자 a를 넣어 호출해볼게요

9
00:00:28,410 --> 00:00:32,668
fct 함수는 a = a + 42 를 수행하도록 만들었습니다
함수 호출이 끝난 뒤엔

10
00:00:32,668 --> 00:00:35,219
한번 더 a의 값을 출력하고, 0을 반환합니다

11
00:00:35,219 --> 00:00:38,670
컴파일 시에 저의 main은 오류를 출력하지 않을 거예요
그럼 무슨 일이 일어날까요?

12
00:00:38,670 --> 00:00:42,570
42가 나오고 84가 출력될까요?
아니면 42가 나오고 또 42가 출력될까요?

13
00:00:42,570 --> 00:00:46,760
여러분이 생각할 시간을 2~3초 드리겠습니다

14
00:00:46,760 --> 00:00:53,760
함수는 인자의 복사본을 사용한다는 것을 기억하시나요?
42가 두 번 출력됩니다!

15
00:00:53,760 --> 00:00:58,129
이유는 굉장히 단순합니다, 제가 a를 main의 여기서 정의했기 때문이죠

16
00:00:58,129 --> 00:01:03,510
그리고 42라는 값을 넣어 주었습니다

17
00:01:03,510 --> 00:01:06,960
42라는 값을 처음 출력해준 뒤
fct에 'a'라는 값을 보냈습니다

18
00:01:06,960 --> 00:01:12,330
하지만 정확하게는 'a'를 보낸 것이 아닙니다
'a'의 값의 복사본을 보냈습니다

19
00:01:12,330 --> 00:01:17,130
결국 함수에 있는 'a'는
main의 'a'와는 다른 새로운 'a' 입니다

20
00:01:17,130 --> 00:01:22,740
새로운 'a'도 42라는 값을 가지고 있죠
이 'a'의 값을 확인해 볼게요

21
00:01:22,740 --> 00:01:26,729
'a'는 42였으니 42 + 42가 될 것이고
그 값을 여기 'a'에 넣었습니다

22
00:01:26,729 --> 00:01:32,430
실제로 여기 함수에서의 'a'는 84라는 값을 가질 겁니다
하지만 함수가 종료되었을 때 이 'a'는 더 이상 수정된 'a'가 아닙니다

23
00:01:32,430 --> 00:01:36,000
main으로 돌아와서 'a'를 다시 확인해 보면

24
00:01:36,000 --> 00:01:39,299
이 'a'는 수정되지 않았습니다, 이건 여전히 42입니다

25
00:01:39,299 --> 00:01:43,049
그렇기 때문에 이건 여전히 42라고 출력됩니다
저희가 원하는 건 fct 함수 내에서

26
00:01:43,049 --> 00:01:48,630
main에 있는 'a'의 값을 수정하고 싶습니다

27
00:01:48,630 --> 00:01:52,770
함수에는 복사본이 전달될 것이고
이 복사본의 값을 복사하는 것은 불가능하기 때문에

28
00:01:52,770 --> 00:01:55,140
저희는 'a'를 찾을 수 있게 하는 값을 복사해야 합니다

29
00:01:55,140 --> 00:01:57,450
그리고 우린 'a'를 찾을 방법을 배웠었죠

30
00:01:57,450 --> 00:02:00,719
예시를 들어 주소를 이렇게 복사하고…

31
00:02:00,719 --> 00:02:04,860
여기에 'a'의 포인터를 넣어주겠습니다

32
00:02:04,860 --> 00:02:09,919
일반적으로 이건 작동하지 않을 거예요!

33
00:02:09,919 --> 00:02:12,120
우리는 몇 가지 부분을 잊어버렸기 때문입니다

34
00:02:12,120 --> 00:02:16,349
좋은 아이디어가 있습니다, 우리는 'a'의 주솟값을 복사할 겁니다

35
00:02:16,349 --> 00:02:21,690
포인터로 전달받았는데, 여기는… 제가 무엇을 수정했었죠?

36
00:02:21,690 --> 00:02:26,879
여기 'a'는 int형 포인터입니다
그래서 a + 42는 주솟값에 42를 더한 것과 같습니다

37
00:02:26,879 --> 00:02:30,420
int 사이즈만큼 42번 이동한 거죠… 포인터의 산술은 이렇게 동작합니다

38
00:02:30,420 --> 00:02:34,829
그리고 그 값을 'a'에 넣었습니다
실제로, a를 수정하기는 하였지만

39
00:02:34,829 --> 00:02:39,390
이건 main의 a를 수정한 것이 아닙니다, 역참조를 사용해야 합니다

40
00:02:39,390 --> 00:02:45,390
*을 넣어주었습니다,
그리고 이 줄에서 'a'가 가리키는 값을 보고 싶다고 해보겠습니다

41
00:02:45,390 --> 00:02:48,739
지금 이 'a'는 main의 'a'입니다

42
00:02:48,739 --> 00:02:53,280
우선 42 + 42의 결과를 여기 '* a'에 넣어줍니다

43
00:02:53,280 --> 00:02:58,019
다시 한번 말하지만 main의 'a'에 값을 넣는 것입니다

44
00:02:58,019 --> 00:03:03,359
이제 42와 84를 출력해 보겠습니다

45
00:03:03,359 --> 00:03:07,349
이것은 아주 고전적인 포인터 사용법 중 하나입니다

46
00:03:07,349 --> 00:03:10,230
예를 들면 메모리의 스택 영역에 존재하는 다른 함수의 변수를

47
00:03:10,230 --> 00:03:13,349
함수에서 수정할 수 있게 해 줍니다

48
00:03:13,349 --> 00:03:15,959
언젠가 여러분이 malloc이나 heap과 같은 내용이 있는 비디오를 볼 때

49
00:03:15,959 --> 00:03:19,049
여러분은 스택에 무언가를 할당할 수 없을 겁니다

50
00:03:19,049 --> 00:03:21,810
함수 내에서 두세 개의 매개 변수를 수정하고 싶을 때

51
00:03:21,810 --> 00:03:24,540
반환할 필요 없이 다른 함수에서 값을 수정할 수 있는 유일한 방법은

52
00:03:24,540 --> 00:03:28,980
포인터를 사용하는 방법뿐입니다

53
00:03:28,980 --> 00:03:30,299
실제 사례들을 조금 더 보여줄게요…

54
00:03:30,299 --> 00:03:33,510
진짜 실제 사례는 아니지만 고전적인 포인터의 사용법입니다

55
00:03:33,510 --> 00:03:41,359
포인터는 예를 들어 만약 ptr = 42를 쓴다면

56
00:03:41,359 --> 00:03:47,250
어떤 일이 벌어질까요…

57
00:03:47,250 --> 00:03:56,849
조금 정리해 볼게요…
경고를 하네요, 이렇게 말하고 있어요

58
00:03:56,849 --> 00:04:00,569
야! 너 지금 여기에 int 값을 넣으려고 하잖아,
포인터 변수에 있는 임의의 값을 int로 변환하려 하는 거라고!

59
00:04:00,569 --> 00:04:03,750
엄밀히 말하자면 int 포인터는 주솟값이니 불가능한 건 아니지만요

60
00:04:03,750 --> 00:04:06,299
42번 주소 안에 있는 값을 보고 싶어요!

61
00:04:06,299 --> 00:04:10,379
하지만 사실은 프로그램이 값을 어디에 넣고 있는지 알 수 없습니다

62
00:04:10,379 --> 00:04:13,709
그렇기 때문에 주소를 직접 명시하는 것은 위험한 행위입니다

63
00:04:13,709 --> 00:04:16,649
컴파일러가 우리에게 경고하는 이유죠

64
00:04:16,649 --> 00:04:19,948
지금 이 행동은 별로 좋지 않다고 말이에요!
하지만 아주 특별한 케이스가 있죠

65
00:04:19,949 --> 00:04:29,610
0을 넣을 땐 어떤 에러도 등장하지 않습니다

66
00:04:29,610 --> 00:04:33,060
왜냐면 우리는 0이라는 메모리 주소에 아무것도 넣을 수 없기 때문입니다

67
00:04:33,060 --> 00:04:35,190
당신의 프로그램은 항상 주소 0에 아무것도 가지고 있지 않을 겁니다

68
00:04:35,190 --> 00:04:40,560
다음과 같은 규칙이 있습니다, 포인터의 값이 0이면

69
00:04:40,560 --> 00:04:43,530
이걸 null 포인터라고 부르고

70
00:04:43,530 --> 00:04:46,440
이 포인터는 아무것도 가리키고 있지 않으며
이는 종종 유용하게 사용됩니다

71
00:04:46,440 --> 00:04:50,009
지금 이야기하진 않을 거지만 예를 들어드릴게요

72
00:04:50,009 --> 00:04:54,720
포인터가 아주 많은 상황에서

73
00:04:54,720 --> 00:04:57,960
어떤 포인터가 요소를 가리키고 있는지 또는
어떤 포인터가 요소를 가리키고 있지 않은지 알 수 있습니다

74
00:04:57,960 --> 00:05:01,259
0을 가리키고 있는 것들은
아직 제대로 된 주소를 가리키지 않고 있습니다

75
00:05:01,259 --> 00:05:04,169
우리가 직접 접근해서 값을 확인할 수 있는 주소가 제대로 된 주소입니다

76
00:05:04,169 --> 00:05:07,800
이건 할당되지 않은 포인터와

77
00:05:07,800 --> 00:05:11,190
할당된 포인터를 구별하는 좋은 방법입니다

78
00:05:11,190 --> 00:05:14,340
이 포인터에 주소가 할당되었느냐 아니냐로 구별합니다

79
00:05:14,340 --> 00:05:17,669
우리는 포인터를 사용하는 아주 고전적인 예시를 보았습니다

80
00:05:17,669 --> 00:05:21,599
다른 함수에 있는 값을 수정하기 위해 함수에 주소를 넘겨주는 방법

81
00:05:21,599 --> 00:05:25,289
그리고 또 다른 중요한 요소인 값이 0인 포인터

82
00:05:25,289 --> 00:05:27,990
주소 0에는 그 어떠한 값도 들어있지 않기 때문에

83
00:05:27,990 --> 00:05:30,780
주소 0을 사용함으로써 아무것도 가리키고 있지 않은 포인터를

84
00:05:30,780 --> 00:05:33,719
표현할 수 있는 겁니다

85
00:05:33,719 --> 00:05:36,719
널 포인터는 아무것도 가리키지 않는다고 종종 이야기하곤 합니다

86
00:05:36,719 --> 00:05:42,259
실제로는 0을 가리키지만, 0에는 어떠한 값도 들어있지 않기 때문이죠! 좋아요!
<< translated by inyang, ji-kim, yeslee, mki and mseo :) >>
