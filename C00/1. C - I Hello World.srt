1
00:00:01,000 --> 00:00:04,000
C 언어를 배우기 위한 첫 번째 비디오에 오신 것을 환영합니다

2
00:00:04,000 --> 00:00:06,000
우리는 C 언어로 우리의 첫 번째 프로그램을 만들 것이며,

3
00:00:06,000 --> 00:00:08,000
그 프로그램을 'hello world'라고 부를 것입니다

4
00:00:08,000 --> 00:00:10,000
'hello world'는 종종 첫 언어를 매우 단순하게 배울 때 사용되며,

5
00:00:10,000 --> 00:00:13,000
우리는 여러분이 보고있는 스크린에 "hello world"를 출력해 볼 것입니다

6
00:00:13,000 --> 00:00:16,000
이런 방법은 프로그래밍 언어의 문법을 배울 때 사용됩니다

7
00:00:16,000 --> 00:00:20,000
걱정하지 마세요, 이번 영상에서 저는 제가 작성하는 모든 것을 설명하지 않을 거에요

8
00:00:20,000 --> 00:00:24,000
그냥 쭉 따라하세요, 그러면 다 잘 될 거예요

9
00:00:24,000 --> 00:00:26,000
가장 먼저 알아야 할 것은

10
00:00:26,000 --> 00:00:28,000
기계가 이해하기 전의 컴퓨터 프로그램은

11
00:00:28,000 --> 00:00:31,000
특정 언어(우리의 경우에는 C)로 된 코드를 담고 있는 텍스트 파일이며

13
00:00:37,000 --> 00:00:41,000
사람이 읽을 수 있다는 것입니다

14
00:00:41,000 --> 00:00:45,000
두 번째로 알아야할 것은 C 프로그램은 언제나 시작점을 가진다는 건데,

15
00:00:45,000 --> 00:00:48,000
그 시작점은 'main'이라고 불립니다

16
00:00:48,000 --> 00:00:50,000
좋아요, 이제 시작합시다

17
00:00:50,000 --> 00:00:54,000
저는 빈 폴더를 가지고 있고, 여기에 main.c라는 파일을 만듭니다

18
00:00:54,000 --> 00:01:02,000
여러분은 main이라는 이름이 아닌 다른 이름을 줄 수 있습니다. 여기서 중요한건 뒤에 붙는 .c이고,

19
00:01:02,000 --> 00:01:07,000
그 안에는 main 함수가 있다는 것입니다

20
00:01:07,000 --> 00:01:12,000
자, 저는 이제 int main()과 { }을 타이핑하겠습니다

21
00:01:12,000 --> 00:01:16,000
이걸 어떻게 읽냐면, 저는 int main을 함수라고,

22
00:01:16,000 --> 00:01:19,000
괄호 안에는 함수가 하는 일이라고 선언합니다

23
00:01:19,000 --> 00:01:26,000
아무튼 C 파일은 항상 위에서부터 아래로 진행됩니다

24
00:01:26,000 --> 00:01:28,000
저는 main.c파일이 있고

25
00:01:28,000 --> 00:01:32,000
여러분은 이걸 cat을 이용해 읽을 수 있습니다

26
00:01:32,000 --> 00:01:35,000
컴퓨터가 이해하지 못하는 이것을

27
00:01:35,000 --> 00:01:38,000
어떻게 이해하게끔 할까요?

28
00:01:38,000 --> 00:01:41,000
단순히, 저는 이 파일을 컴파일합니다. 저는 gcc를 사용합니다

29
00:01:41,000 --> 00:01:43,000
gcc는 .c 파일을 읽을 수 있는 프로그램이며,

30
00:01:43,000 --> 00:01:47,000
.c파일을 컴퓨터가 이해할 수 있는 무언가로 변환시켜줍니다

31
00:01:47,000 --> 00:01:49,000
그래서 gcc main.c는, 됐군요

32
00:01:49,000 --> 00:01:54,000
이제 a.out이라는 새 파일이 보이네요

33
00:01:54,000 --> 00:01:59,000
이제 cat a.out을 실행시키면, a.out을 여기서 볼 수 있습니다

34
00:01:59,000 --> 00:02:05,000
여기서 알 수 있는 중요한 점은, a.out은 우리가 읽을 수 있는 파일이 아니라는 것입니다

35
00:02:05,000 --> 00:02:10,000
스크린에서 볼 수 있듯이, 우리가 이해할 수 없는 것들이 있습니다

36
00:02:10,000 --> 00:02:16,000
하지만 이건 정상적인 것이고 binary file라고 합니다, 이것들이 컴퓨터가 프로그램을 실행하는 방법입니다

37
00:02:16,000 --> 00:02:25,000
컴파일이 끝나면 당신은 당신이 읽을 수는 없지만, 프로그램을 실행시킬 수는 있는 파일을 가지게 됩니다

38
00:02:25,000 --> 00:02:27,000
우리는 hello world를 출력하기를 원했죠

39
00:02:27,000 --> 00:02:31,000
컴파일 문제를 예방하기 위해서 저는 이걸 더해줘야 합니다

40
00:02:31,000 --> 00:02:38,000
걱정하지 마세요, 여기서 설명하지는 않을 겁니다, 이건 이후의 비디오에서 다뤄질 거예요

41
00:02:38,000 --> 00:02:46,000
컴파일러는 위에서부터 아래로 읽습니다

42
00:02:46,000 --> 00:02:48,000
그리고 각 문장은 ;으로 끝내야 합니다

43
00:02:48,000 --> 00:02:52,000
여기서 저는 printf를 타이핑 printf는 화면에 출력하는 명령어입니다

44
00:02:52,000 --> 00:02:54,000
printf를 입력하고, 양 따옴표 사이에 hello world

45
00:02:54,000 --> 00:03:00,000
그리고 ;를 마지막으로 둡니다

46
00:03:00,000 --> 00:03:03,000
이제 gcc로 다시 컴파일할게요

47
00:03:03,000 --> 00:03:05,000
실행을 하면 hello world가 출력됩니다

48
00:03:05,000 --> 00:03:07,000
좋아요

49
00:03:07,000 --> 00:03:09,000
만약 제가 마지막에 ; 없이

50
00:03:09,000 --> 00:03:13,000
다시 컴파일해본다면 이렇게 뜹니다

51
00:03:13,000 --> 00:03:16,000
마지막에 ; 를 입력하라고 요구합니다

52
00:03:16,000 --> 00:03:24,000
왜냐하면 ;는 명령 행을 끝내는 표시이기 때문이죠

53
00:03:24,000 --> 00:03:26,000
좋아요, 돌아갑시다

54
00:03:26,000 --> 00:03:28,000
당신은 명령 지시 메시지도 함께 출력된 것을 볼 수 있습니다

55
00:03:28,000 --> 00:03:30,000
저는 명령 지시 메시지가 다음 줄에 오게 하고싶어요

56
어떻게 할까요? 첫번째 방법은 엔터로 여기에 줄바꿈을 넣는 겁니다

57
00:03:34,000 --> 00:03:36,000
하지만 컴파일러는 한 줄씩 읽죠

58
00:03:36,000 --> 00:03:42,000
이 행에서, 괄호와 쌍따옴표는 닫히지 않았고, 끝에는 ;가 없습니다

59
00:03:42,000 --> 00:03:50,000
만약 컴파일한다면, 닫는 따옴표가 없다는 에러가 날 것입니다

60
00:03:50,000 --> 00:04:09,000
그리고 다른 에러들도요

61
00:04:09,000 --> 00:04:12,000
만약 문제가 생긴다면, 항상 첫 에러를 보세요

62
00:04:12,000 --> 00:04:14,000
그게 잇따른 다른 에러들을 발생시켰을 수도 있기 때문입니다

63
00:04:14,000 --> 00:04:17,000
이 첫 에러로부터 발생한 다른 모든 에러들은

64
00:04:17,000 --> 00:04:21,000
따옴표가 닫히지 않았기 때문입니다

65
00:04:21,000 --> 00:04:29,000
저는 에러들을 순서대로 고치기를 조언합니다

66
00:04:29,000 --> 00:04:33,000
이전 버전으로 돌아가죠

67
00:04:33,000 --> 00:04:36,000
이렇게 엔터를 치는 것은 작동하지 않습니다

68
00:04:36,000 --> 00:04:42,000
그러나 \\n이라는, 줄바꿈을 위한 특수 문자가 있습니다

69
00:04:42,000 --> 00:04:46,000
이제 컴파일을 다시 하게 된다면,

70
00:04:46,000 --> 00:04:50,000
이런, 저장을 깜빡했네요

71
00:04:50,000 --> 00:04:53,000
미안합니다, 다시 컴파일하고 실행하면

72
00:04:53,000 --> 00:04:57,000
줄바꿈이 있는 hello world가 있습니다

73
00:04:57,000 --> 00:04:59,000
당신은 한 줄씩 읽고, ;는 명령의 끝입니다

74
00:04:59,000 --> 00:05:10,000
예를 들어, 저는 이하의 것들을 쓸 수 있죠

75
00:05:10,000 --> 00:05:14,000
이 줄에 저는 서로 다른 두 명령을 할 것입니다

76
00:05:14,000 --> 00:05:16,000
hello pouet도 출력하라고 명령합니다

77
00:05:16,000 --> 00:05:17,000
컴파일하고, 실행하면

78
00:05:17,000 --> 00:05:19,000
작동합니다.

79
00:05:19,000 --> 00:05:21,000
이제 만약 제가 이 ;를 지우고

80
00:05:21,000 --> 00:05:24,000
컴파일 후 실행한다면

81
00:05:24,000 --> 00:05:30,000
컴파일러가 에러를 띄우는 걸 볼 수 있죠

82
00:05:30,000 --> 00:05:36,000
제 두 표현들 사이에 ;가 없습니다

83
00:05:36,000 --> 00:05:39,000
컴파일러가 당신에게 뭐라고 말하는지 반드시 읽어야 합니다

84
00:05:39,000 --> 00:05:50,000
그러면 당신이 에러를 찾는 데에 도움이 될 것입니다

85
00:05:50,000 --> 00:05:53,000
제 조언은 두 명령을 같은 줄에 넣지 말라는 겁니다

86
00:05:53,000 --> 00:05:55,000
당신이 한 줄에 한 명령만을 넣는다면 훨씬 읽기 쉬울 것입니다

87
00:05:55,000 --> 00:05:57,000
컴파일하면 우리는 완전히 같은 결과를 얻을 수 있습니다

88
00:05:57,000 --> 00:06:00,000
이걸 원하는 만큼 더 할 수 있습니다

89
00:06:00,000 --> 00:06:04,000
여기 제가 몇 개를 더 추가하고, 컴파일하면

90
00:06:04,000 --> 00:06:08,000
결과를 볼 수 있습니다

91
00:06:08,000 --> 00:06:11,000
우리는 우리의 첫 C 프로그램을 만들었고

92
00:06:11,000 --> 00:06:15,000
어떻게 C 프로그램을 컴파일하는지 알게 됐으며,

93
00:06:15,000 --> 00:06:20,000
실행을 위한 실행 파일을 만드는 방법을 알게 되었습니다

94
00:06:20,000 --> 00:06:24,000
다음 비디오에서 우리는 다른 많은 것들을 다룰 것입니다

95
00:06:24,000 --> 00:06:28,000
그러면 당신은 제가 오늘 했던 것에 대해 완벽히 이해할 겁니다

<< translated by inyang, chelee, mki, yeslee and mseo :) >>
