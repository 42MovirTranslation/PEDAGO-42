1
00:00:00,000 --> 00:00:00,500
이번 비디오에서는 “while”문에 대해 배워봅시다.

2
00:00:02,948 --> 00:00:06,808
지금까지는 조건문인 “if”에 대해 배웠죠. 

3
00:00:07,179 --> 00:00:11,519
“While” 역시 조건문이지만 조금 특별합니다. “If”문에선 단 한 번만,

4
00:00:12,099 --> 00:00:15,239
조건이 0이 아닐 때, “if”의 범위에 들어갔습니다. 

5
00:00:15,698 --> 00:00:23,189
“While”문도 조건이 0이 아닐 때 범위에 들어가지만, 그 조건이 유지되는 한

6
00:00:23,679 --> 00:00:25,660
범위 안에 머무릅니다.

7
00:00:25,660 --> 00:00:28,618
자, 어떻게 작동하는지 볼까요? 코드를 써보겠습니다.

8
00:00:30,189 --> 00:00:36,088
이렇게 적으면 어떤 일이 일어나는지 봅시다.

9
00:00:38,170 --> 00:00:43,710
요주의 단어 “while”을 쓰고… “CouCou”… 다음에 “\n”... 

10
00:00:45,189 --> 00:00:47,399
자, 집중하세요.

11
00:00:50,469 --> 00:00:53,548
짠! 강제로 멈출 수밖에 없었어요. 무슨 일이 일어났는지 설명해 드리죠.

12
00:00:54,100 --> 00:00:56,160
프로그램을 실행시키고 while문이 작동했죠. 

13
00:00:56,409 --> 00:01:00,750
while(1) 이란, 괄호 안의 값이 0이 아닌 동안에는

14
00:01:00,808 --> 00:01:02,998
조건문 안의 코드를 실행시킨다는 뜻입니다.

15
00:01:04,150 --> 00:01:04,989
다시 한번 말하자면,

16
00:01:04,989 --> 00:01:10,048
“if”문과 같이 이런식으로 쓸 수 있습니다. 한 문장밖에 없다면 말이죠. 

17
00:01:10,688 --> 00:01:11,889
그럼,

18
00:01:11,890 --> 00:01:13,890
다시 되돌려 놓겠습니다.

19
00:01:14,049 --> 00:01:15,610
됐죠.

20
00:01:15,609 --> 00:01:17,609
“while”문은 이 범위 안에 든 내용을 실행합니다.

21
00:01:17,799 --> 00:01:22,889
여기에 있는 변수, 그러니까 여기에 있는 값이 변하여 조건이 거짓이 되기 전까지는 말이죠. 지금은 “1”이 들어가있으니,

22
00:01:23,049 --> 00:01:26,938
이 프로그램은 영원히 종료되지 않습니다. 이 범위 안에 든 코드를 무한 반복하면서 말이죠.

23
00:01:27,129 --> 00:01:29,280
그렇기에 “Coucou”가 멈추지 않고 계속 뜨고 있는 겁니다.

24
00:01:29,799 --> 00:01:31,799
끊임없이 말이죠.

25
00:01:31,819 --> 00:01:36,588
이렇게는 잘 안 보일지 모르겠지만 계속 뜨고 있습니다. 이런 반복문의 요점이 뭐냐고요? 예를 들겠습니다.

26
00:01:37,859 --> 00:01:39,859
배열이 있습니다.

27
00:01:40,379 --> 00:01:46,429
배열 안에는 10개의 int형 원소가 들어있고요. 

28
00:01:46,709 --> 00:01:51,889
각각의 원소에 값을 주고 싶군요. 값은 0부터 10으로 줍시다. 

29
00:01:53,759 --> 00:02:01,228
간단하게요. 써보겠습니다.

30
00:02:01,228 --> 00:02:05,808
이제 조건을 넣어줍니다. i가 10보다 작을 때라고 해야겠죠.

31
00:02:06,209 --> 00:02:10,069
왜 작거나 같을 때가 아니라 10보다 작기만 할 때일까요? 

32
00:02:10,258 --> 00:02:14,987
만약 i가 10이 되면 조건문에서 빠져나와야 합니다. 왜냐하면 tab[10]은

33
00:02:15,090 --> 00:02:17,009
존재하지 않기 때문이죠. 기억하시나요?

34
00:02:17,009 --> 00:02:21,649
tab[0]이 첫 번째 원소였으니, tab[9]가 10개 원소들 중 마지막 원소가 됩니다.

35
00:02:22,620 --> 00:02:26,239
이렇게도 할 수 있습니다. 

36
00:02:29,759 --> 00:02:36,739
원소 값은 i 값과 같게 하고요. i를 증가시키기 위해 i++를 여기에 써줍니다.

37
00:02:39,689 --> 00:02:46,189
이 코드는 무슨 일을 할까요? 10개의 원소가 들어간 배열을 하나 선언했죠. int형인 i를 선언했고요. 0으로 초기화했습니다. 

38
00:02:46,530 --> 00:02:51,739
그리고 여기에서 검사합니다. “i < 10”이 맞나? 이제 배열의 모든 원소를 0부터 시작해 9까지 반복해서 돌 겁니다. 

39
00:02:51,739 --> 00:02:54,739
그래서 i < 10이 맞는가. 맞습니다. 지금 값은 0이니까요.

40
00:02:55,079 --> 00:02:55,890
그러므로

41
00:02:55,889 --> 00:02:58,099
tab[0]은 0이 됩니다. 

42
00:02:58,199 --> 00:03:02,478
완벽하군요. 그리고  i++를 하니, 이 문장을 실행했을 때 i는 1의 값을 가지고 있습니다. 

43
00:03:03,120 --> 00:03:06,439
다시 시작하죠. 1 < 10 입니까?

44
00:03:06,870 --> 00:03:09,829
맞죠. 여기로 접어들어서 tab[1]은 1 값을 가지게 됐습니다.

45
00:03:10,019 --> 00:03:14,209
i++를 합니다. 2 < 10인가요? 3 < 10은요? 4 < 10은? 등등...

46
00:03:14,209 --> 00:03:14,969
그렇게 계속 더해지다가

47
00:03:14,969 --> 00:03:18,258
10이 되고, 반복문에서 나오면서 끝이 납니다. 

48
00:03:21,360 --> 00:03:26,809
자, 보시면 반복문을 실행했고 그 안에서 나왔습니다. 이제 두 번째 반복문을 만들어 보죠.

49
00:03:28,139 --> 00:03:30,139
여기에 두 번째 반복문을 넣겠습니다.

50
00:03:30,930 --> 00:03:32,700
i를 다시 0으로 초기화합니다.

51
00:03:32,699 --> 00:03:37,008
역순으로 하는 방법도 있었지만 그냥 전과 같은 방식으로 하겠습니다. 

52
00:03:37,860 --> 00:03:39,860
이번에는 값들을 출력해 보죠.

53
00:03:40,259 --> 00:03:44,568
실용성을 따지자면 매우 쓸모 없는 짓이지만, 어떻게 작동하는지 보여주기 위함입니다. 

54
00:03:49,939 --> 00:03:52,569
이렇게 하면 이해가 더 잘 될 겁니다.

55
00:03:53,870 --> 00:03:55,490
짠.

56
00:03:55,490 --> 00:03:56,480
그러고.. 아!

57
00:03:56,479 --> 00:03:57,079
잠시만요.

58
00:03:57,080 --> 00:04:00,910
이대로 실행하면 어떻게 될까요? 분명 문제가 생깁니다. 보시죠. 0만 출력하고 있습니다. 

59
00:04:00,909 --> 00:04:04,659
이유는 제가 i++를 빼먹었기 때문이죠.

60
00:04:05,449 --> 00:04:08,228
반복문을 쓸 때 꼭 기억하세요.

61
00:04:08,330 --> 00:04:12,669
첫째, 변수나 인덱스 등을 쓴다면, 예를 들어 “i” 같은 것들이죠,

62
00:04:12,860 --> 00:04:15,669
먼저 값을 초기화해야 합니다. 

63
00:04:16,220 --> 00:04:21,489
둘째, 알맞은 종료 조건을 생각해 낸 뒤, 어느 순간에 인덱스 “i”가 증감하거나 변경되어야 합니다.

64
00:04:21,488 --> 00:04:27,428
이것이 반복문을 만드는 중요 요소입니다. 반복문의 시작 조건과 종료 조건을 만드는 것이죠. 

65
00:04:27,430 --> 00:04:31,930
i = 0에서 i는 10보다 작으니 반복문에 들어옵니다. 최소 한 번은 말이죠.

66
00:04:32,418 --> 00:04:35,378
이 반복문은 0 1 2 3 4 5 6 7 8 9를 출력할 겁니다.

67
00:04:36,620 --> 00:04:40,389
tab 안에 넣은 값이 그렇기 때문이지요.

68
00:04:40,790 --> 00:04:42,968
여기를 조금 바꿔보죠.

69
00:04:44,120 --> 00:04:47,980
i 곱하기 i. 안에 제곱값을 넣을 겁니다. 

70
00:04:49,129 --> 00:04:51,129
보시죠. 0, 1, 4, 9, 

71
00:04:51,649 --> 00:04:53,678
16, 25, 36, 49, 64, 81...

72
00:04:54,259 --> 00:04:55,310
끝났습니다.

73
00:04:55,310 --> 00:05:01,030
이제 반복문을 쓰는 법을 배웠습니다. 매우 유용하게 쓸 겁니다. 배열 안을 순차적으로 돌 수 있고요.

74
00:05:01,459 --> 00:05:02,599
또는

75
00:05:02,600 --> 00:05:06,010
원소 목록을 돌 수도 있겠죠. 특정 일이 일어날 때까지 같은 작업을 반복할 수도 있고요.

76
00:05:06,168 --> 00:05:13,568
예를 들자면, 이용자에게서 키보드 입력 값을 받는다던가 하는 것들이죠. 결론적으로 매우 유용합니다.
이게 끝입니다. 이제 while문을 쓸 줄 알게 됐군요!
<< translated by inyang, chelee, mki, yeslee, mseo, and ji-kim :) >>
