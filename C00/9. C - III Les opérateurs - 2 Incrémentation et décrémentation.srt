1
00:00:01,000 --> 00:00:04,000
이 비디오는 변수를 증가 및 감소시키는데 사용하는

2
00:00:04,000 --> 00:00:07,000
++ 및 -- 연산자에 대한 내용입니다. 

3
00:00:07,000 --> 00:00:13,000
일반적으로 +를 할 때 변수 2개가 필요합니다

4
00:00:13,000 --> 00:00:17,000
변수 'a'와 'b'를 + 하면 우리는 두 변수를 계산해서 결과를 가집니다.

5
00:00:17,000 --> 00:00:27,000
++와 --는 보통 숫자나 문자 변수를 바로 증가 또는 감소시킬 수 있습니다

6
00:00:27,000 --> 00:00:31,000
이제 예시를 들어 설명해보겠습니다

7
00:00:31,000 --> 00:00:35,000
42라는 값을 가지는 정수 i를 선언합니다

8
00:00:35,000 --> 00:00:41,000
이것은 i의 값을 나타냅니다

9
00:00:41,000 --> 00:00:45,000
이렇게 ++을 사용할 수 있습니다

10
00:00:45,000 --> 00:00:50,000
이제 i는 43입니다

11
00:00:50,000 --> 00:00:55,000
++는 i 값에, 1을 더해서, 저장했습니다

12
00:00:55,000 --> 00:00:59,000
마치 i = i + 1이라고 쓴 것처럼요

13
00:00:59,000 --> 00:01:05,000
두 결과는 같습니다

14
00:01:05,000 --> 00:01:10,000
이제 printf 안에 이 연산자를 사용하고

15
00:01:10,000 --> 00:01:14,000
무슨 일이 일어나는지 봅시다

16
00:01:14,000 --> 00:01:19,000
결과는 43이 아닌 다시 42입니다

17
00:01:19,000 --> 00:01:24,000
지금  i를 2번 출력하려고 합니다

18
00:01:24,000 --> 00:01:33,000
그 결과는 42 그리고 43입니다

19
00:01:33,000 --> 00:01:35,000
i 값을 printf에 사용하고 마지막에 ++을 해줬을 때

20
00:01:35,000 --> 00:01:45,000
무슨 일이 일어나는지 봅시다

21
00:01:45,000 --> 00:01:48,000
만약 ++를 ‘i’ 뒤가 아닌 앞에 넣으면

22
00:01:48,000 --> 00:01:49,000
이번에는 i 값을 가져오고,

23
00:01:49,000 --> 00:01:54,000

24
00:01:54,000 --> 00:01:57,000
이것이 둘의 차이입니다

25
00:01:57,000 --> 00:02:00,000
++연산자를 앞에도 뒤에도 쓸 수 있는데 

26
00:02:00,000 --> 00:02:07,000
필요에 따라 i의 값을 먼저 더할지, 나중에 더할지 선택하여 사용할 수 있습니다

27
00:02:07,000 --> 00:02:12,000
다음과 같이 입력했을 때 무슨 일이 일어나는지 봅시다

28
00:02:12,000 --> 00:02:16,000
i 값을 읽고 증가를 해줬습니다

29
00:02:16,000 --> 00:02:19,000
그리고 새로운 i 값이 더해집니다

30
00:02:19,000 --> 00:02:24,000
i는 동시에 2개의 값을 읽을 수 있을까요?

31
00:02:24,000 --> 00:02:27,000
에러나서, 실행이 안되네요

32
00:02:27,000 --> 00:02:33,000
왜냐하면 i 값을 바꾸고 같은 줄에서 다시 사용할 수 없기 때문입니다

33
00:02:33,000 --> 00:02:38,000
또 다른 변수를 사용해보겠습니다

34
00:02:38,000 --> 00:02:44,000
예를 들어볼게요

35
00:02:44,000 --> 00:02:48,000
이젠 실행됩니다

36
00:02:48,000 --> 00:02:52,000
다시 한 번 말하지만, i를 같은 줄에서 2번 사용할 수 없습니다

37
00:02:52,000 --> 00:02:57,000
만약 사용한다면 몇 가지 문제가 발생할 겁니다

38
00:02:57,000 --> 00:03:03,000
--도 동일합니다

39
00:03:11,000 --> 00:03:14,000
여기에 --를 넣으면, i 값이 감소합니다

40
00:03:11,000 --> 00:03:14,000
다른 쪽에 --을 넣으면

41
00:03:14,000 --> 00:03:19,000
i 값이 출력된 후에 감소합니다

42
00:03:19,000 --> 00:03:24,000
이 연산자들은 자주 사용됩니다

43
00:03:24,000 --> 00:03:29,000
예를 들어 배열에 접근할 때

44
00:03:29,000 --> 00:03:38,000
인덱스가 ++와 --를 이용하여, 배열을 탐색하는 변수를 갖는 건 유용하기 때문입니다

45
00:03:38,000 --> 00:59:59,000
증감연산자는 컴퓨터 프로그래밍에서 널리 사용되는 연산자입니다.

46
00:03:04,590 --> 00:03:06,590
'I'가 줄어들어서

47
00:03:08,160 --> 00:03:12,680
그리고 만약 제가 이걸 놓으면 -- 다른 쪽에서는, 그 크기를 줄여줄 것입니다.

48
00:03:15,120 --> 00:03:16,230
여기 있어요.

49
00:03:16,230 --> 00:03:22,249
여기 두 개의 연산자를 보실 수 있습니다. 그리고 -- 보시다시피, 이 연산자들은 매우 많이 사용되고 있습니다.

50
00:03:22,740 --> 00:03:27,529
왜냐하면 우리가 무언가를 탐색하고 싶을 때, 예를 들어, 그림을 탐색하고 싶을 때,

51
00:03:27,530 --> 00:03:28,620
그래서 여러분이 그림을 보고 싶을 때

52
00:03:28,620 --> 00:03:34,040
변수를 갖는 것은 매우 편리합니다. 그래서 우리가 그림을 그릴 수 있는 지표는 --

53
00:03:34,040 --> 00:03:40,249
또는 -- 이것이 가장 일반적인 사용입니다. 이것은 프로그래밍에 매우 많이 사용되는 연산자입니다.
<< translated by inyang, chelee, mki, yeslee, mseo and ji-kim :) >>
