1
00:00:00,000 --> 00:00:07,330
이 비디오에서는 함수의 전달인자에 대해

2
00:00:07,330 --> 00:00:08,800
이야기해봅시다

3
00:00:08,800 --> 00:00:10,660
이미 함수를 어떻게 선언하고

4
00:00:10,660 --> 00:00:12,250
어떻게 함수를 호출하는지

5
00:00:12,250 --> 00:00:14,440
값을 어떻게 반환하는지 보았습니다

6
00:00:14,440 --> 00:00:15,730
오늘은 매개변수 값을 어떻게 주어야 하는지에 대해

7
00:00:15,730 --> 00:00:17,080
초점을 맞춰봅시다

8
00:00:17,080 --> 00:00:20,499
매개변수는 함수 내부에 전달하여 사용할 수 있는 값으로

9
00:00:20,499 --> 00:00:23,859
계산을 하거나, 지정한 작업이나 명령문을 수행할 수 있습니다

10
00:00:23,859 --> 00:00:26,529
이제 함수가 우리가 알고 있던 진짜 함수답죠?

11
00:00:26,529 --> 00:00:29,380
이것을 이용하면 함수는 강력한 도구가 될 수 있습니다

12
00:00:29,380 --> 00:00:32,670
예를 들어

13
00:00:32,670 --> 00:00:35,289
여기서 항상 int형을 반환하는

14
00:00:35,289 --> 00:00:36,969
함수 fct의 프로토타입을 찾습니다

15
00:00:36,969 --> 00:00:38,829
하지만 지금은 그곳에 "void"형 매개변수 대신,

16
00:00:38,829 --> 00:00:42,969
int 형을 보낼 것입니다

17
00:00:42,969 --> 00:00:46,179
좋습니다, 동작하게 해줍시다

18
00:00:46,179 --> 00:00:48,519
선언하는 곳은 같게 해줘야 합니다

19
00:00:48,519 --> 00:00:50,589
그러므로 여기에 int를 선언해줍니다

20
00:00:50,589 --> 00:00:52,269
이전에 만들었던 프로토타입과는 달리

21
00:00:52,269 --> 00:00:54,160
이 매개변수에 “a”라는

22
00:00:54,160 --> 00:00:56,289
이름을 지어줍니다

23
00:00:56,289 --> 00:00:58,329
이 변수 "a"는 fct 함수의 범위에

24
00:00:58,329 --> 00:00:59,589
속합니다, 다시 말하면

25
00:00:59,589 --> 00:01:01,300
내부에 또 다른 변수 “a”를

26
00:01:01,300 --> 00:01:03,429
선언할 수 없습니다, 그렇지 않으면

27
00:01:03,429 --> 00:01:05,680
a가 2개이고, 사실 하나는

28
00:01:05,680 --> 00:01:10,060
여기에 이미 있어’라고 말할 것입니다

29
00:01:10,060 --> 00:01:11,620
만약 함수를 이대로 호출한다면,

30
00:01:11,620 --> 00:01:14,590
사소한 문제가 발생할 것입니다

31
00:01:14,590 --> 00:01:16,660
인자를 충분히 사용하지 않았다고

32
00:01:16,660 --> 00:01:17,470
알려줄 것입니다

33
00:01:17,470 --> 00:01:20,980
여기서 인자에 int를 사용했다는 것을

34
00:01:20,980 --> 00:01:24,070
말해주고 호출했을 때,

35
00:01:24,070 --> 00:01:25,990
아무것도 주지 않았습니다

36
00:01:25,990 --> 00:01:27,880
그래서 함수에 int형 42를 줄 것입니다

37
00:01:27,880 --> 00:01:32,380
바보같이 42를

38
00:01:32,380 --> 00:01:39,880
반환하는 대신에, "a"를 반환합니다

39
00:01:39,880 --> 00:01:42,130
여기서 "Coucou 42"가 표시되고

40
00:01:42,130 --> 00:01:44,140
모든 것이 잘 진행되고 있습니다

41
00:01:44,140 --> 00:01:46,690
반환 값은 42입니다

42
00:01:46,690 --> 00:01:47,860
42만 반환하기 때문에

43
00:01:47,860 --> 00:01:50,570
이 함수는 별로 쓸모가 없습니다

44
00:01:50,570 --> 00:01:52,310
안으로 들어오면,

45
00:01:52,310 --> 00:01:55,610
printf를 출력하고 "a"를 반환합니다

46
00:01:55,610 --> 00:01:56,810
“a”의 자리에 "a * a"를 계산하는

47
00:01:56,810 --> 00:01:58,610
예시를 만들어 봅시다

48
00:01:58,610 --> 00:02:05,150
실행해보면, “a * a”의 값, 1764가

49
00:02:05,150 --> 00:02:08,419
출력됩니다, 자, 이제

50
00:02:08,419 --> 00:02:10,270
함수가 좀 더 흥미로워졌죠?

51
00:02:10,270 --> 00:02:12,520
또 생각해볼까요…

52
00:02:12,520 --> 00:02:15,890
이전에 말했듯이, 반환은

53
00:02:15,890 --> 00:02:17,930
오직 한 개의 값만 가능하지만,

54
00:02:17,930 --> 00:02:18,709
함수에는 여러 인자를

55
00:02:18,709 --> 00:02:19,280
넣어줄 수 있습니다

56
00:02:19,280 --> 00:02:20,900
여기에 또 다른 타입인 float를

57
00:02:20,900 --> 00:02:23,420
주기로 했습니다

58
00:02:23,420 --> 00:02:26,989
우리는 float형을 넣고,

59
00:02:26,989 --> 00:02:28,220
이 float형을 "x"라고 부릅시다

60
00:02:28,220 --> 00:02:32,540
자, 매개변수에 소수를 의미하는

61
00:02:32,540 --> 00:02:34,670
float형 값을 주겠습니다,

62
00:02:34,670 --> 00:02:37,000
예를 들면 0.5요

63
00:02:37,000 --> 00:02:40,010
여기서 "a * a"를 하는 대신에

64
00:02:40,010 --> 00:02:47,900
"a * x"로 쓰겠습니다, 이제 중요한 건

65
00:02:47,900 --> 00:02:49,340
반환 값은 더는 정수가 아닌

66
00:02:49,340 --> 00:02:51,500
소수가 되었습니다,

67
00:02:51,500 --> 00:02:57,140
float로 바꿔줍니다, 여기에서는

68
00:02:57,140 --> 00:03:02,380
int가 아니라 float이고, 형식 지정자는 f입니다

69
00:03:02,380 --> 00:03:04,250
이 코드를 실행해본다면

70
00:03:04,250 --> 00:03:07,070
이 함수는 a * x의 결과를 반환합니다

71
00:03:07,070 --> 00:03:15,220
따라서 “42 * 0.5”의 결과인 21을 반환하게 되는 것입니다

72
00:03:16,230 --> 00:03:20,800
마지막으로 함수에 매개변수를 전달할 때 중요한 개념은 다음과 같습니다

73
00:03:20,800 --> 00:03:25,780
여기 우리는 몇 가지 변수들을 가지고 있습니다

74
00:03:25,780 --> 00:03:27,220
여기서 중요한 점은

75
00:03:27,220 --> 00:03:34,629
"float x"는 0.5와 같다는 것입니다;

76
00:03:34,629 --> 00:03:43,269
여기에 x를 주고,

77
00:03:43,269 --> 00:03:45,549
그것을 받은 다음의

78
00:03:45,549 --> 00:03:48,209
x는 0.5가 아니라 0.8이 됩니다

79
00:03:48,209 --> 00:03:57,670
여기는 함수가 실행된 후를 보여줍니다

80
00:03:57,670 --> 00:04:07,709
"x"를 출력해서 무슨 일이 일어났는지 살펴보도록 하죠

81
00:04:08,430 --> 00:04:11,560
결과를 보면

82
00:04:11,560 --> 00:04:13,060
계산이 다르게 되었죠, 왜냐하면

83
00:04:13,060 --> 00:04:14,049
fct 함수에 도착했을 때,

84
00:04:14,049 --> 00:04:16,779
float형 변수인 x가 0.5가 아닌 0.8로 선언되었기 때문입니다

85
00:04:16,779 --> 00:04:18,910
그 결과 336이 나왔습니다

86
00:04:18,910 --> 00:04:23,020
하지만 반환할 때 

87
00:04:23,020 --> 00:04:26,380
함수의 리턴값만을 반환합니다

88
00:04:26,380 --> 00:04:27,580
여기서 우리는

89
00:04:27,580 --> 00:04:30,100
"x"가 fct 함수 내에서 바뀌더라도

90
00:04:30,100 --> 00:04:31,990
main에서는 바뀌지 않는다는 걸 아셔야 합니다

91
00:04:31,990 --> 00:04:33,460
왜냐하면 여기에서 변경된

92
00:04:33,460 --> 00:04:36,849
float형 변수 "x"를 주지 않았기 때문입니다

93
00:04:36,849 --> 00:04:41,169
따라서 변수 "x"는 단지 이 값의 복사본입니다

94
00:04:41,169 --> 00:04:44,200
결국 "x"의 값은 05입니다

95
00:04:44,200 --> 00:04:48,190
여기에 "x"가 아닌 직접 05를 주었습니다

96
00:04:48,190 --> 00:04:49,990
그러니까 도착했을 때,

97
00:04:49,990 --> 00:04:52,510
여기서 "x"를 08로 재정의해서 반환해도,

98
00:04:52,510 --> 00:04:55,080
본 값은 절대 바뀌지 않습니다

99
00:04:55,080 --> 00:04:58,690
여기서 "x"는 항상 05와 같습니다

100
00:04:58,690 --> 00:05:02,860
다 됐어요, 지금까지가 인자들에 대한 전부입니다

101
00:05:02,860 --> 00:05:06,430
이제 함수를 만들고, 호출하며, 반환 값을 만들고, 함수에 매개변수를 주는 법도

102
00:05:06,430 --> 00:05:08,320
알게 되었습니다

103
00:05:08,320 --> 00:05:09,760
여러분은 이제 프로그래밍이란 것을 시작할 수 있습니다

104
00:05:09,760 --> 00:05:14,400
이제 당신 차례 입니다;)
<<translated by mseo, ji-kim, inyang, chelee, mki and yeslee :)>>