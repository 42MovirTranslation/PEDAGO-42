1
00:00:01,000 --> 00:00:03,000
이번 비디오는 연산자에 대한 내용입니다.

2
00:00:03,000 --> 00:00:08,000
우리는 이제 어떻게 변수를 만들고 값을 대입하는지 알고 있습니다

3
00:00:08,000 --> 00:00:11,000
이제 이 변수들을 이용해서 계산해보겠습니다

4
00:00:11,000 --> 00:00:15,000
자 그럼 기본적인 연산자로 시작해봅시다

5
00:00:15,000 --> 00:00:20,000
그럼 int i, i = 42 라고 합시다

6
00:00:20,000 --> 00:00:25,000
컴파일 했고, 잘 동작합니다

7
00:00:25,000 --> 00:00:28,000
우리는 간단한 연산자들을 사용할 수 있습니다. 예로, 

8
00:00:28,000 --> 00:00:30,000
42+12

9
00:00:30,000 --> 00:00:35,000
결과는 54네요

10
00:00:35,000 --> 00:00:40,000
여러분들은 +나 -를 사용할 수 있습니다

11
00:00:40,000 --> 00:00:46,000
이번엔 나눠보죠

12
00:00:46,000 --> 00:00:49,000
보시다시피, 이번엔 결과가 3입니다.

13
00:00:49,000 --> 00:00:52,000
왜냐면, 42안에 12를 얼마나 채울 수 있는가에 대한 결과이기 때문입니다.

14
00:00:52,000 --> 00:00:55,000
오직 3번 채울 수 있습니다.

15
00:00:55,000 --> 00:01:00,000
4번은 안됩니다.

16
00:01:00,000 --> 00:01:04,000
제가 만약 49로 값을 바꾸면,

17
00:01:04,000 --> 00:01:06,000
결과는 4입니다.

18
00:01:06,000 --> 00:01:09,000
우리는 float형이 아니라 int를 사용하기 때문에,  

19
00:01:09,000 --> 00:01:11,000
float에서는 소수점을 갖지만,

20
00:01:11,000 --> 00:01:20,000
int형에서 소수 부분은 항상 사라져 버립니다.

21
00:01:20,000 --> 00:01:24,000
제가 만약 예제를 47로 바꾸면,

22
00:01:24,000 --> 00:01:27,000
결과는 약 3.8, 거의 4입니다.

23
00:01:27,000 --> 00:01:30,000
소수 부분은 항상 버려집니다.

24
00:01:30,000 --> 00:01:38,000
결과는 항상 정수입니다.

25
00:01:38,000 --> 00:01:50,000
좋아요. 나눠봤으니 이제는 곱해봅시다.

26
00:01:50,000 --> 00:01:54,000
그럼 이번에는 소수점까지 나오는

27
00:01:54,000 --> 00:01:56,000
유클리드 나눗셈을 해 봅시다!

28
00:01:56,000 --> 00:01:59,000
전에 47을 12로 나누었고, 결과는 3이었습니다.

29
00:01:59,000 --> 00:02:02,000
나머지가 3이었고, 3을 12로 곱하면 결과는 36입니다.

30
00:02:02,000 --> 00:02:06,000
47 - 36 = 11

31
00:02:06,000 --> 00:02:10,000
해보니, 11이 나왔습니다.

32
00:02:10,000 --> 00:02:14,000
간단한 나눗셈의 나머지입니다.

33
00:02:14,000 --> 00:02:20,000
이 연산자는 modulo라고 부르며,

34
00:02:20,000 --> 00:02:26,000
다음과 같습니다

35
00:02:26,000 --> 00:02:36,000
그럼 같이 따라 해봐요

36
00:02:36,000 --> 00:02:41,000
우선순위에 대한 질문을 해봅시다.

37
00:02:41,000 --> 00:02:43,000
47 - 가 있지만, 오른쪽에 있는 것들을 먼저 계산해야 합니다.

38
00:02:43,000 --> 00:02:45,000
아시다시피, 곱셈, 나눗셈, 나머지 연산은

39
00:02:45,000 --> 00:02:50,000
더하기, 빼기 연산보다 우선순위가 높습니다.

40
00:02:50,000 --> 00:02:52,000
그래서 47을 12로 나누는 것부터 시작합시다.

41
00:02:52,000 --> 00:02:56,000
결과는 3

42
00:02:56,000 --> 00:03:00,000
3을 12로 곱하면 36

43
00:03:00,000 --> 00:03:08,000
47 - 36은 11

44
00:03:08,000 --> 00:03:12,000
보시다시피, 나머지가 잘린 것을 볼 수 있습니다.

45
00:03:12,000 --> 00:03:17,000
자, 나머지를 얻었습니다

46
00:03:17,000 --> 00:03:19,000
만약 우선순위가 어렵게 느껴진다면

47
00:03:19,000 --> 00:03:21,000
괄호를 사용할 수 있습니다.

48
00:03:21,000 --> 00:03:29,000
그리고 연산은 왼쪽에서 오른쪽으로 진행합니다.

49
00:03:29,000 --> 00:03:32,000
괄호는 가장 높은 우선순위를 가집니다.

50
00:03:32,000 --> 00:03:39,000
실행해 볼까요?

51
00:03:39,000 --> 00:03:43,000
만약 괄호의 위치를 바꾸면

52
00:03:43,000 --> 00:03:47,000
결과는 47입니다.

53
00:03:47,000 --> 00:03:49,000
왜냐구요?

54
00:03:49,000 --> 00:03:54,000
나눗셈의 우선순위가 높지만,

55
00:03:54,000 --> 00:03:57,000
괄호가 있기 때문에 괄호를 먼저 계산합니다.

56
00:03:57,000 --> 00:04:01,000
왜냐하면 괄호는 더 높은 우선순위를 가지기 때문에

57
00:04:01,000 --> 00:04:04,000
12 * 12 = 144이고

58
00:04:04,000 --> 00:04:07,000
47을 144로 나눴을 때 0이여서

59
00:04:07,000 --> 00:04:12,000
47 - 0 = 47입니다.

60
00:04:12,000 --> 00:04:16,000
지금까지는 기본적인 연산이었습니다.

61
00:04:16,000 --> 00:04:21,000
이제 변수를 사용해서 연산할 수 있습니다.

62
00:04:21,000 --> 00:04:25,000
이제 47을 가지고 있는 변수 a를 사용해봅시다.

63
00:04:25,000 --> 00:04:28,000
이것들을 a로 바꾸고,

64
00:04:28,000 --> 00:04:34,000
같은 결과를 얻었습니다.

65
00:04:34,000 --> 00:04:40,000
여기 a의 값이 들어가 계산식이 만들어졌습니다.

66
00:04:40,000 --> 00:04:45,000
우선순위에 따라 괄호 다음 나눗셈을 진행합니다.

67
00:04:45,000 --> 00:04:55,000
그리고 변수 a의 값을 불러옵니다.

68
00:04:55,000 --> 00:05:00,000
괄호와 연산자로 연습해보길 바랍니다.

69
00:05:00,000 --> 00:05:04,000
이제 괄호와 연산자를 사용하는 법을 알게 되었습니다.

70
00:05:04,000 --> 00:05:10,000
요점은 계산식을 만들고 그 결과를 변수에 넣는 것입니다.

71
00:05:10,000 --> 00:05:20,000
참고로, 이렇게 계산식을 printf에 넣으면,

72
00:05:20,000 --> 00:05:30,000
그 결과가 printf로 출력됩니다.

73
00:05:30,000 --> 00:05:35,000
다른 말로, 여러분은 계산식의 결과를 따로

74
00:05:35,000 --> 00:59:59,000
저장할 필요가 없습니다.
<< translated by inyang, chelee, mki, yeslee, mseo and ji-kim :) >>
