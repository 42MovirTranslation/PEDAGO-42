1
00:00:00,110 --> 00:00:02,190
이번 비디오에서는

2
00:00:02,190 --> 00:00:06,779
#ifdef와 #ifndef에 대해 알아봅시다

3
00:00:06,779 --> 00:00:08,490
#ifdef는 한 마디로 말하자면

4
00:00:08,490 --> 00:00:11,700
“만약 ...를 ... 라고 정의한다면 !” 입니다

5
00:00:11,700 --> 00:00:14,639
간단해요! 우리는 이미 #if와

6
00:00:14,639 --> 00:00:15,870
#define에 대해 알아 보았습니다

7
00:00:15,870 --> 00:00:17,190
#define는 무언가 정의하는 데에 쓰이고

8
00:00:17,190 --> 00:00:19,199
#if는 조건문을 확인할 수 있게 해줍니다

9
00:00:19,199 --> 00:00:23,189
따라서 우리는 #ifdef로

10
00:00:23,189 --> 00:00:24,269
어떤 대상이 정의되어 있는지 확인할 수 있고

11
00:00:24,269 --> 00:00:27,240
#ifndef는 그 반대로 어떤 대상이 정의되지 않았는지 확인할 수 있습니다

12
00:00:27,240 --> 00:00:29,640
이해를 돕기 위해 간단한 예제를 보여드릴게요

13
00:00:29,640 --> 00:00:32,369
자 여기 저번 동영상의 코드입니다

14
00:00:32,369 --> 00:00:35,430
#if defined (POUIC)를 실행해보면

15
00:00:35,430 --> 00:00:38,190
“NO OTHER”이 출력됩니다

16
00:00:38,190 --> 00:00:40,950
문제 없습니다, 정상이예요

17
00:00:40,950 --> 00:00:43,559
POUIC는 정의되지 않았죠

18
00:00:43,559 --> 00:00:45,629
그래서 전처리기가 작업한 이후에는

19
00:00:45,629 --> 00:00:48,360
printf(“youpi matin\n”)는 존재하지 않는 상태로 남습니다

20
00:00:48,360 --> 00:00:51,120
이제 #define POUIC를 적어주고

21
00:00:51,120 --> 00:00:57,840
전처리 과정 이후를 체크하면

22
00:00:57,840 --> 00:00:59,309
printf("youpi matin\n"); 이 있습니다

23
00:00:59,309 --> 00:01:01,739
완벽하게 잘 되죠

24
00:01:01,739 --> 00:01:04,549
지금까지는 아주 완벽합니다

25
00:01:04,549 --> 00:01:12,420
#ifdef를 가지고도 위와 같이 코드를 짤 수 있습니다

26
00:01:12,420 --> 00:01:16,530
이렇게 해도 결과는 똑같습니다,
"youpi matin"가 출력되죠!

27
00:01:16,530 --> 00:01:19,380
ifdef는 if defined와 같다고 볼 수 있습니다

28
00:01:19,380 --> 00:01:22,610
이제 #ifndef를 써봅시다

29
00:01:22,610 --> 00:01:24,540
이전과 같지만 정의되어있지 않습니다!

30
00:01:24,540 --> 00:01:25,590
이번에는 POUIC가 정의되어 있어서

31
00:01:25,590 --> 00:01:27,869
NO OTHER가 나왔습니다

32
00:01:27,869 --> 00:01:28,829
이것들이 어디서 어떻게 쓰일까요?

33
00:01:28,829 --> 00:01:30,119
이건 꽤 쉬운 건데

34
00:01:30,119 --> 00:01:32,790
예를 들어

35
00:01:32,790 --> 00:01:33,540
커맨드 라인에서

36
00:01:33,540 --> 00:01:35,729
디버깅이 필요한 상황일 때

37
00:01:35,729 --> 00:01:37,530
컴파일 옵션에 -dDEBUG를 넣고

38
00:01:37,530 --> 00:01:40,920
#ifdef가 걸려있는 부분에 접근이 불가하도록 만들 수도 있습니다

39
00:01:40,920 --> 00:01:43,049
그 부분은 절대 컴파일되지 않겠죠

40
00:01:43,049 --> 00:01:45,390
만약 디버깅하지 않는다면

41
00:01:45,390 --> 00:01:46,979
코드 전체는

42
00:01:46,979 --> 00:01:48,540
컴파일되거나 혹은 되지 않습니다!

43
00:01:48,540 --> 00:01:49,740
이렇게 하면

44
00:01:49,740 --> 00:01:51,720
디버그를 실행한 상태로 혹은 하지 않은 상태로

45
00:01:51,720 --> 00:01:53,790
실행파일을 만들어낼 수 있습니다

46
00:01:53,790 --> 00:01:56,969
또한 여러 다른 상황에서도 사용되며

47
00:01:56,969 --> 00:01:59,159
때때로 OS, CPU에 따라

48
00:01:59,159 --> 00:02:00,820
다르게 빌드할 수 있게 해줍니다.

49
00:02:00,820 --> 00:02:02,830
이렇게 해서 특정 타겟층을 대상으로한

50
00:02:02,830 --> 00:02:04,270
특수한 코드를 작성하여 빌드할 수 있습니다

51
00:02:04,270 --> 00:02:07,180
이정도면 되겠죠

52
00:02:07,180 --> 00:02:11,440
#if와 섞어도 마찬가지로 잘 작동합니다

53
00:02:11,440 --> 00:02:12,970
잊지 마세요

54
00:02:12,970 --> 00:02:15,190
반드시 #endif로 끝을 맺어주셔야 합니다

55
00:02:15,190 --> 00:02:16,870
모든 #if, #ifdef 또는 #ifndef 구역은

56
00:02:16,870 --> 00:02:18,580
#endif로 끝나야만 합니다

57
00:02:18,580 --> 00:02:19,330
이건 정말 중요한 부분이예요

58
00:02:19,330 --> 00:02:23,800
#elifdef는 존재하지 않으므로 

59
00:02:23,800 --> 00:02:29,320
반드시 #elif defined로 써야 한다는 걸 알아두세요

60
00:02:29,320 --> 00:02:32,110
좋습니다. 마지막으로 알아볼 (그리고 가장 많이 쓰이는)
#ifdef 와 #ifndef의 기능으로는

61
00:02:32,110 --> 00:02:33,580
헤더 파일 보호입니다

62
00:02:33,580 --> 00:02:36,489
왜 헤더 파일을 보호해야 할까요?

63
00:02:36,489 --> 00:02:37,900
간단한 예를 들어보죠

64
00:02:37,900 --> 00:02:39,520
여러분께서는 스코프 안에 무언가 #define 하는 것이

65
00:02:39,520 --> 00:02:42,280
단지 프로토타입을 정의하는 게 아니라

66
00:02:42,280 --> 00:02:47,140
실제로 무언가를 선언하고 정의하는 것임을알게 될 것입니다

67
00:02:47,140 --> 00:02:51,250
헤더에서 이를 할 경우

68
00:02:51,250 --> 00:02:52,560
더 위험할 수 있습니다

69
00:02:52,560 --> 00:02:56,830
새로운 터미널 창 하나를 연 뒤에

70
00:02:56,830 --> 00:02:59,680
알맞은 디렉토리를 찾아가서

71
00:02:59,680 --> 00:03:03,330
fct.h를 열도록 하겠습니다

72
00:03:03,330 --> 00:03:05,680
좋아요! 이 예시를 수정해야겠죠

73
00:03:05,680 --> 00:03:11,230
gl_pouet이라는 int형 전역변수를 갖고 있고

74
00:03:11,230 --> 00:03:15,780
이 전역변수에 12를 할당합니다

75
00:03:15,780 --> 00:03:20,079
이제 여기에

76
00:03:20,079 --> 00:03:25,829
#include fct.h를 입력해놓습니다

77
00:03:26,220 --> 00:03:28,010
좋아요.

78
00:03:28,010 --> 00:03:29,330
그리고 youpi_matin를 출력하는 부분에서는

79
00:03:29,330 --> 00:03:35,870
여기선 gl_pouet를 같이 출력해봅시다

80
00:03:35,870 --> 00:03:39,230
“youpi matin 12”가 출력되는 걸 볼 수 있겠죠

81
00:03:39,230 --> 00:03:41,060
완벽해요! 동작하네요

82
00:03:41,060 --> 00:03:43,549
만약 #include "fct.h"를 두 번 적어준다면

83
00:03:43,549 --> 00:03:44,180
fct.h

84
00:03:44,180 --> 00:03:49,340
어떻게 될까요? 에러네요

85
00:03:49,340 --> 00:03:52,040
컴파일러가 변수 gl_pouet는

86
00:03:52,040 --> 00:03:54,140
여러 번 정의되었다는 경고를 알려주었네요

87
00:03:54,140 --> 00:03:57,620
아무도 fct.h를 두 번 포함하지 않을 거예요

88
00:03:57,620 --> 00:04:00,760
바보같은 행동이죠! 맞아요!

89
00:04:00,760 --> 00:04:04,400
하지만 개발하다 보면 stdio.h와 같은 헤더 파일을 가져와서 쓸 거예요

90
00:04:04,400 --> 00:04:05,540
stdio.h는 아마

91
00:04:05,540 --> 00:04:07,519
다른 .h 파일을 가져와서 쓸 수도 있고

92
00:04:07,519 --> 00:04:08,480
그 파일도 다른 여러 .h를 가져와서 쓸 수도 있죠

93
00:04:08,480 --> 00:04:10,639
.h가 여러 번 포함되는 위험을 제거하려면

94
00:04:10,639 --> 00:04:15,019
접근하지 못하도록 막아야겠죠

95
00:04:15,019 --> 00:04:17,418
잠깐 그 전에

96
00:04:17,418 --> 00:04:18,798
CPP로 어떻게 처리되는지

97
00:04:18,798 --> 00:04:24,440
보여드릴게요

98
00:04:24,440 --> 00:04:28,490
같은 줄에 2번 존재해 있습니다

99
00:04:28,490 --> 00:04:29,780
.h에 보호를 걸어줍시다

100
00:04:29,780 --> 00:04:30,740
어떻게 할 수 있을까요

101
00:04:30,740 --> 00:04:33,560
#ifdef 및 #ifndef을 사용하는 건 간단합니다

102
00:04:33,560 --> 00:04:38,210
#ifndef [파일명] 이라고 씁시다

103
00:04:38,210 --> 00:04:41,389
예를 들어 #ifndef __FCT_H__ 이렇게요

104
00:04:41,389 --> 00:04:47,060
예를 들어

105
00:04:47,060 --> 00:04:50,599
정의되지 않았을 때

106
00:04:50,599 --> 00:04:53,840
#define __FCT_H__로 정의하고

107
00:04:53,840 --> 00:04:55,090
마지막에 #endif를 써줍니다

108
00:04:55,090 --> 00:04:57,080
이제 여러분께서는 우리가

109
00:04:57,080 --> 00:05:01,280
방금 어떤 일을 했는지 이해하셨을 거예요

110
00:05:01,280 --> 00:05:03,889
전처리기는 2번 지나칠 거에요

111
00:05:03,889 --> 00:05:07,039
첫 번째 #ifndef _FCT_H_ 를 봅시다

112
00:05:08,750 --> 00:05:10,820
아니죠, __FCT_H___는 정의된 상태가 아닙니다

113
00:05:10,820 --> 00:05:12,710
이번에는

114
00:05:12,710 --> 00:05:14,630
__FCT_H__가 정의된 뒤에 어떻게 동작하는지 봅시다

115
00:05:16,780 --> 00:05:19,039
이제 이건 정의된 상태가 되었고

116
00:05:19,039 --> 00:05:21,710
int gl_pouet 를 선언하고 12를 할당합니다

117
00:05:21,710 --> 00:05:23,090
문제 없죠

118
00:05:23,090 --> 00:05:25,370
다음으로 넘어가서

119
00:05:25,370 --> 00:05:27,800
__FCT_H___가 정의되어 있나요?

120
00:05:27,800 --> 00:05:29,060
예, 이번에는 정의되어있네요

121
00:05:29,060 --> 00:05:30,919
그래서 아무것도 하지 않을 겁니다

122
00:05:30,919 --> 00:05:32,599
#ifndef와 #endif 사이에 아무것도 넣지 않을 거예요

123
00:05:32,599 --> 00:05:35,330
따라서 gl_pouet를 하나 더 선언하지는 않을거예요

124
00:05:35,330 --> 00:05:37,219
만약 main.c를 CPP로 본다면

125
00:05:37,219 --> 00:05:41,930
처음에는 gl_pouet를 가진 fct.h를 가져올 것이고

126
00:05:41,930 --> 00:05:43,639
두 번째 #include "fct.h"에서는

127
00:05:43,639 --> 00:05:45,980
사실상 아무것도 남아있지 않을 겁니다

128
00:05:45,980 --> 00:05:48,580
완전히 사라졌죠

129
00:05:48,580 --> 00:05:51,440
네, 여기까지 입니다

130
00:05:51,440 --> 00:05:52,880
.h 파일을 보호하는 데 사용하죠

131
00:05:52,880 --> 00:05:55,910
여러분께서 헤더 파일이

132
00:05:55,910 --> 00:05:57,320
여러 번 참조되었는지

133
00:05:57,320 --> 00:05:58,340
아닌지 모를 수도 있기에

134
00:05:58,340 --> 00:05:59,510
항상 #ifdef, #define, #endif를 활용해서

135
00:05:59,510 --> 00:06:01,580
헤더 파일을 보호하는 것이 좋습니다

136
00:06:01,580 --> 00:06:05,750
#pragma once를 쓰는 것만큼

137
00:06:05,750 --> 00:06:09,640
간단한 일이니 해주는 게 좋겠죠
<< translated by mseo, mki, ji-kim, inyang and yeslee :) >>
