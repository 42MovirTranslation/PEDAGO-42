1
00:00:00,110 --> 00:00:02,190
이번 비디오에서는

2
00:00:02,190 --> 00:00:06,779
#ifdef와 #ifndef에 대해 알아봅시다

3
00:00:06,779 --> 00:00:08,490
우리가 상상하는 #ifdef는

4
00:00:08,490 --> 00:00:11,700
말 그대로 만약 정의해보면! 입니다

5
00:00:11,700 --> 00:00:14,639
간단해요! 우리는 이미 #if와

6
00:00:14,639 --> 00:00:15,870
#define에 대해 보았습니다

7
00:00:15,870 --> 00:00:17,190
#define은 정의할 수 있게 해줍니다

8
00:00:17,190 --> 00:00:19,199
#if는 조건을 확인할 수 있게 해줍니다

9
00:00:19,199 --> 00:00:23,189
따라서 #ifdef는

10
00:00:23,189 --> 00:00:24,269
정의되어있는지를 알 수 있고

11
00:00:24,269 --> 00:00:27,240
#ifndef는 정의되지 않은 경우를 알 수 있게 해줍니다

12
00:00:27,240 --> 00:00:29,640
사소한 예시를 보면 이해가 잘 될 거에요

13
00:00:29,640 --> 00:00:32,369
자 여기 저번 동영상의 코드입니다

14
00:00:32,369 --> 00:00:35,430
#if defined (POUIC)를 실행해보면

15
00:00:35,430 --> 00:00:38,190
“NO OTHER”이 출력됩니다

16
00:00:38,190 --> 00:00:40,950
문제없습니다

17
00:00:40,950 --> 00:00:43,559
POUIC는 정의되지 않았습니다

18
00:00:43,559 --> 00:00:45,629
그래서 printf(“youpi matin”)는

19
00:00:45,629 --> 00:00:48,360
PREPROC(전처리기: preprocessor) 이후에 존재하지 않습니다

20
00:00:48,360 --> 00:00:51,120
자 이제 define POUIC를 추가해보면

21
00:00:51,120 --> 00:00:57,840
전처리기에서

22
00:00:57,840 --> 00:00:59,309
“youpi matin”을 볼 수 있습니다

23
00:00:59,309 --> 00:01:01,739
완벽해요!

24
00:01:01,739 --> 00:01:04,549
지금 아주 완벽합니다

25
00:01:04,549 --> 00:01:12,420
#ifdef로도 쓸 수 있습니다

26
00:01:12,420 --> 00:01:16,530
이것은 “youpi matin”과 같은 결과이므로

27
00:01:16,530 --> 00:01:19,380
ifdef는 if defined와 같습니다

28
00:01:19,380 --> 00:01:22,610
이제 #ifndef로 써봅시다

29
00:01:22,610 --> 00:01:24,540
이전과 같지만 정의되어있지 않습니다!

30
00:01:24,540 --> 00:01:25,590
이번에는 POUIC가 정의되어 있어서

31
00:01:25,590 --> 00:01:27,869
NO OTHER가 나왔습니다

32
00:01:27,869 --> 00:01:28,829
그래서 어디에 쓰이는지 물어볼 수 있나요?

33
00:01:28,829 --> 00:01:30,119
이건 꽤 쉽습니다

34
00:01:30,119 --> 00:01:32,790
예를 들어

35
00:01:32,790 --> 00:01:33,540
명령어 줄(커맨드 라인)에서

36
00:01:33,540 --> 00:01:35,729
어떤 디버그를 추가하기 원한다면

37
00:01:35,729 --> 00:01:37,530
컴파일 옵션에 -dDEBUG를 넣고

38
00:01:37,530 --> 00:01:40,920
#ifdef 코드 부분을 보호할 것입니다

39
00:01:40,920 --> 00:01:43,049
그 부분은 절대 컴파일되지 않습니다

40
00:01:43,049 --> 00:01:45,390
만약 디버깅하지 않는다면

41
00:01:45,390 --> 00:01:46,979
코드 전체는

42
00:01:46,979 --> 00:01:48,540
컴파일되거나 혹은 되지 않습니다!

43
00:01:48,540 --> 00:01:49,740
디버그를 사용하거나

44
00:01:49,740 --> 00:01:51,720
혹은 사용하지 않고도

45
00:01:51,720 --> 00:01:53,790
실행 가능한 파일을 만들 수 있습니다

46
00:01:53,790 --> 00:01:56,969
또한 여러 다른 상황에서도 사용되며

47
00:01:56,969 --> 00:02:00,820
때때로 OS, CPU에 따라

48
00:02:00,820 --> 00:02:04,270
다르게 빌드할 수 있게 해줍니다.

49
00:02:04,270 --> 00:02:07,180
그게 다예요

50
00:02:07,180 --> 00:02:11,440
#if와 섞어도 동작합니다

51
00:02:11,440 --> 00:02:12,970
#endif로 문장을 끝내는걸

52
00:02:12,970 --> 00:02:15,190
잊지 마세요.

53
00:02:15,190 --> 00:02:16,870
모든 #if, #ifdef 또는 #ifndef 구역은

54
00:02:16,870 --> 00:02:18,580
#endif로 끝나야만 한다는 건

55
00:02:18,580 --> 00:02:19,330
매우 중요합니다

56
00:02:19,330 --> 00:02:23,800
#elifdef는 존재하지 않으므로 

57
00:02:23,800 --> 00:02:29,320
반드시 #elif defined로 써야 한다는 걸 알아두세요

58
00:02:29,320 --> 00:02:32,110
좋아요 이제 #ifdef와 #ifndef 유형의 다음 역할은 (그리고 가장 많이 사용되는)

59
00:02:32,110 --> 00:02:33,580
헤더 파일 보호입니다

60
00:02:33,580 --> 00:02:36,489
왜 헤더 파일을 보호해야 할까요?

61
00:02:36,489 --> 00:02:37,900
간단한 예를 들어보죠

62
00:02:37,900 --> 00:02:39,520
실제로 정의된 프로토타입뿐만 아니라

63
00:02:39,520 --> 00:02:42,280
범위내에서 무언가를 정의할 때

64
00:02:42,280 --> 00:02:47,140
언젠가는 문제가 발생할 것입니다

65
00:02:47,140 --> 00:02:51,250
헤더에서 할 경우

66
00:02:51,250 --> 00:02:52,560
더 많은 위험이 있습니다

67
00:02:52,560 --> 00:02:56,830
그래서

68
00:02:56,830 --> 00:02:59,680
fct.h를 열

69
00:02:59,680 --> 00:03:03,330
새 터미널 창을 열겠습니다

70
00:03:03,330 --> 00:03:05,680
따라서 이 예시를 수정해야 합니다

71
00:03:05,680 --> 00:03:11,230
gl_pouet이라는 int형 전역변수를 갖고 있고

72
00:03:11,230 --> 00:03:15,780
이 전역변수에 12의 값을 줍니다

73
00:03:15,780 --> 00:03:20,079
이제 

74
00:03:20,079 --> 00:03:25,829
#include fct.h를 포함합니다.

75
00:03:26,220 --> 00:03:28,010
좋아요.

76
00:03:28,010 --> 00:03:29,330
그리고 youpi_matin에서

77
00:03:29,330 --> 00:03:35,870
혹시 모르니 gl_pouet를 출력해봅시다

78
00:03:35,870 --> 00:03:39,230
이제 “youpi matin 12”를 볼 수 있습니다

79
00:03:39,230 --> 00:03:41,060
완벽해요! 동작하네요

80
00:03:41,060 --> 00:03:43,549
만약 fct.h를 두 번 포함한다면

81
00:03:43,549 --> 00:03:44,180
fct.h

82
00:03:44,180 --> 00:03:49,340
어떻게 될까요? 에러네요

83
00:03:49,340 --> 00:03:52,040
컴파일러가 gl_pouet의 다중 정의를

84
00:03:52,040 --> 00:03:54,140
조심하라고 하네요!

85
00:03:54,140 --> 00:03:57,620
아무도 fct.h를 두 번 포함하지 않을 거예요

86
00:03:57,620 --> 00:04:00,760
멍청해요! 맞아요

87
00:04:00,760 --> 00:04:04,400
하지만 사람들은 예를 들어 stdio.h 같은 헤더를 포함할 거에요

88
00:04:04,400 --> 00:04:05,540
stdio.h는 아마

89
00:04:05,540 --> 00:04:07,519
다른 여러 .h를 포함할 수 있는

90
00:04:07,519 --> 00:04:08,480
다른 .h가 포함될 수 있습니다

91
00:04:08,480 --> 00:04:10,639
.h가 여러 번 포함되는 위험을 제거하려면

92
00:04:10,639 --> 00:04:15,019
이를 보호해야 합니다

93
00:04:15,019 --> 00:04:17,418
보시다시피

94
00:04:17,418 --> 00:04:18,798
CPP로 어떻게 되는지

95
00:04:18,798 --> 00:04:24,440
보여드리기 전에

96
00:04:24,440 --> 00:04:28,490
같은 줄에 2번 존재해 있습니다

97
00:04:28,490 --> 00:04:29,780
.h를 보호하러 갑시다

98
00:04:29,780 --> 00:04:30,740
어떻게 할 수 있을까요

99
00:04:30,740 --> 00:04:33,560
#ifdef 및 #ifndef을 사용하는 건 간단합니다

100
00:04:33,560 --> 00:04:38,210
#ifndef 파일명이라고 씁니다

101
00:04:38,210 --> 00:04:41,389
예를 들어 #ifndef __FCT_H__ 이렇게요

102
00:04:41,389 --> 00:04:47,060
예를 들어

103
00:04:47,060 --> 00:04:50,599
정의되지 않았을 때

104
00:04:50,599 --> 00:04:53,840
#define __FCT_H__로 정의하고

105
00:04:53,840 --> 00:04:55,090
마지막에 #endif를 써줍니다

106
00:04:55,090 --> 00:04:57,080
지금이 더 분명하게 보이네요

107
00:04:57,080 --> 00:05:01,280
헤더를 2번 포함시킬 거에요

108
00:05:01,280 --> 00:05:03,889
전처리기는 2번 지나칠 거에요

109
00:05:03,889 --> 00:05:07,039
첫 번째 ifndef __FCT_H__를 봅시다

110
00:05:08,750 --> 00:05:10,820
아니에요, 정의되지 않았네요

111
00:05:10,820 --> 00:05:12,710
이번에는

112
00:05:12,710 --> 00:05:14,630
__FCT_H__를 정의하고 봅시다

113
00:05:16,780 --> 00:05:19,039
이제 정의하고 

114
00:05:19,039 --> 00:05:21,710
int gl_pouet = 12를 넣어줍시다

115
00:05:21,710 --> 00:05:23,090
문제없어요

116
00:05:23,090 --> 00:05:25,370
그리고 다음

117
00:05:25,370 --> 00:05:27,800
__FCT_H___가 정의되어있나요?

118
00:05:27,800 --> 00:05:29,060
예. 이번에는 정의되어있네요

119
00:05:29,060 --> 00:05:30,919
그래서 아무것도 하지 않을 겁니다

120
00:05:30,919 --> 00:05:32,599
#ifndef와 #endif 사이에 아무것도 넣지 않을 거예요

121
00:05:32,599 --> 00:05:35,330
그래서 gl_pouet을 하나 더 가지지 않을 겁니다

122
00:05:35,330 --> 00:05:37,219
만약 main.c를 CPP로 본다면

123
00:05:37,219 --> 00:05:41,930
하나의 gl_pouet으로 fct.h를 가질 거고

124
00:05:41,930 --> 00:05:43,639
두 번째 건

125
00:05:43,639 --> 00:05:45,980
사실상 보이지 않습니다

126
00:05:45,980 --> 00:05:48,580
완전히 사라졌죠

127
00:05:48,580 --> 00:05:51,440
그게 전부에요

128
00:05:51,440 --> 00:05:52,880
그건 .h를 보호하는 데 사용됩니다

129
00:05:52,880 --> 00:05:55,910
여러분은 결코 알지 못합니다

130
00:05:55,910 --> 00:05:57,320
.h파일이 언젠가는

131
00:05:57,320 --> 00:05:58,340
여러 번 사용되므로

132
00:05:58,340 --> 00:05:59,510
항상 #ifdef #define 및 #endif를 사용해서

133
00:05:59,510 --> 00:06:01,580
.h파일을 코드 주위에 보호해야 합니다

134
00:06:01,580 --> 00:06:05,750
최신 컴파일러의 경우 파일 위에

135
00:06:05,750 --> 00:06:09,640
#pragma를 한 번 추가할 수 있는 것처럼 간단합니다
<< translated by mseo, mki, ji-kim, inyang and yeslee :) >>
