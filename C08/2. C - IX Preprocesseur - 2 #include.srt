1
00:00:00,000 --> 00:00:01,680
이번 비디오에서는 #include에 대해 알려드리겠습니다

2
00:00:01,680 --> 00:00:05,460
#include는 전처리 명령어로

3
00:00:05,460 --> 00:00:07,049
컴파일 전에 실행됩니다

4
00:00:07,049 --> 00:00:08,760
당연히 링킹되기도 전이죠

5
00:00:08,760 --> 00:00:10,170
링킹은 컴파일 후에 이루어지니까요

6
00:00:10,170 --> 00:00:12,240
따라서 #include는

7
00:00:12,240 --> 00:00:16,199
“ “ 혹은 <>로 감싸여 전달된 헤더 파일 내의 함수를 복사해와

8
00:00:16,199 --> 00:00:20,279
#include라고 써둔 곳에 붙여넣습니다

9
00:00:20,279 --> 00:00:23,609
“ ”와 <>의 차이점은 간단합니다

10
00:00:23,609 --> 00:00:27,660
<> 안에 있는 것은 컴파일러 내에서 자체적으로 찾을 수 있습니다

11
00:00:27,660 --> 00:00:30,060
“ “ 안에 있는 것은 현재 디렉토리나

12
00:00:30,060  --> 00:00:34,170
-I로 지정한 디렉토리 중에서 찾을 수 있습니다

13
00:00:34,170 --> 00:00:36,510
-l 는 -include를 의미합니다

14
00:00:36,510 --> 00:00:38,070
-I .(현재 디렉토리) 혹은

15
00:00:38,070 --> 00:00:39,510
-I 뒤에 다른 디렉토리를 지정함으로써

16
00:00:39,510 --> 00:00:42,989
그 디렉토리의 파일들을 include 할 수 있습니다

17
00:00:42,989 --> 00:00:44,280
gcc가 아닌 다른 컴파일러를 사용한다면

18
00:00:44,280 --> 00:00:45,690
-I 플래그가 없을 수도 있습니다

19
00:00:45,690 --> 00:00:47,129
이 플래그는 지정한 위치로 가서

20
00:00:47,129 --> 00:00:49,890
파일을 찾으라는 뜻입니다

21
00:00:49,890 --> 00:00:51,149
이런 식으로 작동합니다

22
00:00:51,149 --> 00:00:55,399
여기 별 쓸모는 없는 main.c가 있어요

23
00:00:55,399 --> 00:00:57,390
파일이 컴파일되는지 안 되는지만

24
00:00:57,390 --> 00:01:00,420
보면 되니까요

25
00:01:00,420 --> 00:01:03,329
main.c에는 int i;
i = fct(); 가 있고,

26
00:01:03,329 --> 00:01:05,369
위에다가 fct()의 원형을 적어주었으므로

27
00:01:05,369 --> 00:01:07,619
아래에서도 문제없습니다

28
00:01:07,619 --> 00:01:10,350
fct()와 fct.c를 가지고

29
00:01:10,350 --> 00:01:12,330
컴파일하면 잘 되죠, 좋아요

30
00:01:12,330 --> 00:01:17,280
이제 제 main.c 파일로 cpp를 해볼게요

31
00:01:17,280 --> 00:01:20,520
이게 한 번 전처리기를 거친 main.c 파일의 모습입니다

32
00:01:20,520 --> 00:01:25,530
뭐가 변했는지 모르겠죠, 정상입니다

33
00:01:25,530 --> 00:01:26,759
전처리 명령어가 없다는 뜻이에요

34
00:01:26,759 --> 00:01:28,350
전처리 명령어는 항상 #으로 시작하니

35
00:01:28,350 --> 00:01:33,090
#include”fct.c”를 추가하고

36
00:01:33,090 --> 00:01:39,540
main.c의 cpp를 재실행했을 때 어떻게 되나 봅시다

37
00:01:39,540 --> 00:01:45,390
fct.c가 여기에 생겼죠

38
00:01:45,390 --> 00:01:46,799
이건 사실 제가 이 위치에

39
00:01:46,799 --> 00:01:50,310
이 파일을 복사해서

40
00:01:50,310 --> 00:01:52,399
넣은 것과 같아요

41
00:01:52,399 --> 00:01:54,360
아무튼 이건 이 위치에 있어야 해요

42
00:01:54,360 --> 00:01:57,530
무슨 말이냐면 이걸 이번엔 아래쪽에 넣어볼게요

43
00:01:57,680 --> 00:02:04,619
이번에는 fct의 정의네요, 여기 아래에 있습니다

44
00:02:04,619 --> 00:02:10,470
지금 함수 원형, 메인, 정의 순으로 정렬된 파일이 됐죠

45
00:02:10,470 --> 00:02:11,310
직전에 했던 것과 다르게 말이에요

46
00:02:11,310 --> 00:02:15,540
전에는 함수의 정의, 원형, 그리고 메인 순서였으니까요

47
00:02:15,540 --> 00:02:17,459
아무튼 여기 #include가 fct.c 파일로 대체되었어요

48
00:02:17,459 --> 00:02:19,290
file.c를 include에 넣는 건 좋은 생각이 아니에요

49
00:02:19,290 --> 00:02:21,030
왜일까요?

50
00:02:21,030 --> 00:02:23,430
제 프로그램을 리컴파일한다면

51
00:02:23,430 --> 00:02:24,709
무슨 일이 일어날까요?

52
00:02:24,709 --> 00:02:26,730
링크 에러가 났죠

53
00:02:26,730 --> 00:02:32,310
정확하게는 컴파일하려고 읽어올 때마다 main.c 파일이 유효하기 때문이에요

54
00:02:32,310 --> 00:02:33,750
컴파일러는 여러분이 fct 함수를 두 번 정의했다고 알려줍니다

55
00:02:33,750 --> 00:02:39,390
main.c에서 한 번
fct.c에서 또 한 번

56
00:02:39,390 --> 00:02:43,590
정상입니다, main.c가 fct.c를 포함했으니까요

57
00:02:43,590 --> 00:02:45,599
#include가 일반적으로

58
00:02:45,599 --> 00:02:46,800
.h를 include 하는 이유입니다

59
00:02:46,800 --> 00:02:49,290
여러분은 처음부터 .h를 봐왔어요

60
00:02:49,290 --> 00:02:51,209
printf를 쓰기 위해 stdio.h를 쓰는 걸 보셨으니까요

61
00:02:51,209 --> 00:02:53,489
.h는 헤더 파일(.header)를 의미합니다

62
00:02:53,489 --> 00:02:56,640
함수의 원형을 넣는 곳이라는 의미예요

63
00:02:56,640 --> 00:02:59,519
일반적으로는 방금 한 것처럼 함수의 정의를 넣지 않습니다

64
00:02:59,519 --> 00:03:02,159
드물긴 하지만 이렇게 하는 이유가 있긴 있습니다

65
00:03:02,159 --> 00:03:04,470
그래도 여전히 드문 일이므로 우리는 그냥 함수 원형을 넣도록 하죠

66
00:03:04,470 --> 00:03:08,940
이 함수 원형을 여러 파일 안에 나누고

67
00:03:08,940 --> 00:03:11,340
여러 파일에서 사용될 수 있도록요

68
00:03:11,340 --> 00:03:13,019
따라서 여러분의 프로그램에서는

69
00:03:13,019 --> 00:03:15,120
다수의 파일에서

70
00:03:15,120 --> 00:03:18,840
직접 적어 넘겨주는 대신에

71
00:03:18,840 --> 00:03:20,069
함수 원형을 사용할 수 있습니다

72
00:03:20,069 --> 00:03:25,700
#inlclude에 fct.h라는 새 파일을 만들어 넣어볼게요

73
00:03:25,700 --> 00:03:28,590
이 fct.h 파일 안에

74
00:03:28,590 --> 00:03:30,030
그냥 원형들을 집어넣고

75
00:03:30,030 --> 00:03:34,379
여기서 fct.h를 include 하면 됩니다

76
00:03:34,379 --> 00:03:35,940
include를 하는 이유는

77
00:03:35,940 --> 00:03:37,709
이 시점에서 함수들이 이미 정의되어있기 때문입니다

78
00:03:37,709 --> 00:03:40,140
재밌는 거 보여드릴게요

79
00:03:40,140 --> 00:03:41,090
지금 바로 해보겠습니다

80
00:03:41,090 --> 00:03:44,549
일단 저는 fct.h 파일을 가지고 있다고 가정했어요

81
00:03:44,549 --> 00:03:47,129
이건 현재 빈 파일이에요, 완벽하군요

82
00:03:47,129 --> 00:03:52,739
int fct(void); 를 쓰면 끝입니다

83
00:03:52,739 --> 00:03:56,790
이게 제 .h 파일이에요, 가보죠!

84
00:03:56,790 --> 00:03:59,540
컴파일이 되나요? 됩니다

85
00:03:59,540 --> 00:04:01,080
왜 될까요?

86
00:04:01,080 --> 00:04:03,090
헤더를 넣었을 때 지금 제 main.c의 꼴은 이렇습니다

87
00:04:03,090 --> 00:04:06,780
여기 제가 함수 원형을 추가했다는 게 보이시죠.

88
00:04:06,780 --> 00:04:08,220
fct.c에 특별히 뭔가 대단한 걸 한 게 아니에요

89
00:04:08,220 --> 00:04:11,850
함수 원형이 가장 위에 있어야 한다는 것이 흥미로운 지점입니다

90
00:04:11,850 --> 00:04:13,230
그래서 함수 원형이 든 .h 파일을 넣었던 거고요

91
00:04:13,860 --> 00:04:16,980
이렇게 하는 것의 이점을 생각해봅시다

92
00:04:16,980 --> 00:04:19,920
저는 fct를 바꾸기로 마음먹었어요

93
00:04:19,920 --> 00:04:21,238
int 대신 long int를 리턴할 거예요

94
00:04:21,238 --> 00:04:26,460
왜 이런 가정을 하는지는 모르겠지만

95
00:04:26,460 --> 00:04:27,990
안 할 이유도 없으니까요

96
00:04:27,990 --> 00:04:30,360
아무튼 컴파일하면 이런 결과가 나옵니다

97
00:04:30,360 --> 00:04:32,940
에러… 에러…

98
00:04:32,940 --> 00:04:34,380
우리가 fct에 대해서 약속할 때에

99
00:04:34,380 --> 00:04:37,200
여기서는 int를 반환하기로 했는데

100
00:04:37,200 --> 00:04:38,490
지금 제 fct는 여기서 long int를 리턴하기 때문이에요

101
00:04:38,490 --> 00:04:41,460
그래서 저는 다시 int를 리턴하도록 해주거나

102
00:04:41,460 --> 00:04:43,350
.h 파일을 수정할 겁니다

103
00:04:43,350 --> 00:04:46,160
제가 .h파일을 수정한다면

104
00:04:49,010 --> 00:04:52,200
다른 것들은 다 잘 자리하고 있기 때문에

105
00:04:52,200 --> 00:04:54,150
동작합니다

106
00:04:54,150 --> 00:04:57,120
사실 저는 제 예제에 좀 실망했어요

107
00:04:57,120 --> 00:05:01,530
long int는 int로 캐스팅할 수 있거든요

108
00:05:01,530 --> 00:05:03,600
double로 하면 더 재밌을 거예요

109
00:05:03,600 --> 00:05:08,240
int *도 괜찮겠네요

110
00:05:08,240 --> 00:05:10,620
int *로 고치고 0을 리턴합니다

111
00:05:10,620 --> 00:05:13,800
이러면 우리는 적어도 문제가 발생하리라는 걸 알 수 있습니다

112
00:05:13,800 --> 00:05:15,570
일전과 같은 짓을 한다면

113
00:05:15,570 --> 00:05:17,250
제 .h 파일이 문제가 되겠죠

114
00:05:17,250 --> 00:05:21,930
여기 *을 붙이고

115
00:05:21,930 --> 00:05:23,460
다시 시작해보겠어요

116
00:05:23,460 --> 00:05:24,690
이번에도 문제가 발생했습니다

117
00:05:24,690 --> 00:05:26,760
옳은 타입이 아니라고 컴파일러가 경고하는군요

118
00:05:26,760 --> 00:05:28,890
보이시나요? 이렇게 제가 뭔가를 바꾸면

119
00:05:28,890 --> 00:05:31,290
알려주도록 해두었습니다

120
00:05:31,290 --> 00:05:34,200
fct를 사용하는 여러 파일에서 제 함수 fct()에 대해

121
00:05:34,200 --> 00:05:36,150
적어도 제 컴파일러는 여기서

122
00:05:36,150 --> 00:05:39,030
네가 이 부분을 바꾸지 않았고, 그걸 바꾸지 않으면

123
00:05:39,030 --> 00:05:40,260
여기가 호환되지 않는다고 알려줍니다

124
00:05:40,260 --> 00:05:45,570
더불어 long int는 ‘int’와 호환된다는 걸 볼 수 있습니다 (사용은 가능합니다)

125
00:05:45,570 --> 00:05:47,700
그래서 컴파일러가 에러를 내보내지 않는군요, 유감입니다

126
00:05:47,700 --> 00:05:51,630
저는 long int와 int는 같은 게 아니라고

127
00:05:51,630 --> 00:05:54,570
우리에게 알려주도록 할 방법이 있다고 생각합니다

128
00:05:54,570 --> 00:05:57,930
그건 컴파일러의 역할이겠죠

129
00:05:57,930 --> 00:05:59,040
정리하자면 여러분은 #include의 동작 방식을 보았습니다

130
00:05:59,040 --> 00:06:00,330
include는 여러분들이

131
00:06:00,330 --> 00:06:01,979
어딘가의 파일을 코드에 포함할 수 있게 해줍니다

132
00:06:01,979 --> 00:06:03,419
함수의 중간에도 넣을 수 있어요

133
00:06:03,419 --> 00:06:06,510
지금 보여드릴 건 필수사항은 아닙니다

134
00:06:06,510 --> 00:06:08,970
예시를 들어볼게요

135
00:06:08,970 --> 00:06:16,680
여기 #include 뒤에 badidea.h나 badidea.pouet를 넣어봅시다

136
00:06:16,680 --> 00:06:20,130
‘ ‘ 혹은 “ “ 안에는 우리가 원하는 대로 넣을 수 있으니까요

137
00:06:20,130 --> 00:06:26,790
여기 잠시 에러 하나만 고칠게요

138
00:06:26,790 --> 00:06:30,139
쓰지 않더라도 포인터도 하나 넣고요

139
00:06:30,139 --> 00:06:33,449
여기 별을 넣어줬으니까 이제

140
00:06:33,449 --> 00:06:39,240
BADIDEA.POUET을 넣고

141
00:06:39,240 --> 00:06:44,220
printf(”lol \n”);을 넣어 볼게요

142
00:06:44,220 --> 00:06:49,650
컴파일하면 무슨 일이 일어날까요?

143
00:06:49,650 --> 00:06:50,699
문제가 생깁니다

144
00:06:50,699 --> 00:06:51,660
printf가 이르기를

145
00:06:51,660 --> 00:06:55,470
#include 하는 거 잊어버렸구나

146
00:06:55,470 --> 00:07:02,220
만약 제가 플래그 옵션을 지운다면 lol은 잘 출력됩니다

147
00:07:02,220 --> 00:07:05,310
이 fct.c 파일을 cpp를 해보면

148
00:07:05,310 --> 00:07:09,780
함수 원형이 들어 있는 제 .h 파일은 여기,

149
00:07:09,780 --> 00:07:12,840
lol\n 함수가 있는 BADIDEA.POUET은 여기 중간에 잘 포함된 것을 보실 수 있습니다

150
00:07:12,840 --> 00:07:22,560
결국 #include는 여러분의 파일에 함수 원형이 포함될 수 있도록 .h 파일을 가져오는 역할을 주로 합니다

151
00:07:22,560 --> 00:07:23,820
예를 들어 우리에게 라이브러리가 제공된다면

152
00:07:23,820 --> 00:07:26,430
일반적으로는 .h 형식으로 주어집니다

153
00:07:26,430 --> 00:07:28,710
제 코드에 함수 원형들을 포함할 수 있도록 말이죠

154
00:07:28,710 --> 00:07:35,210
이건 제가 라이브러리에서 올바른 함수 원형을 가져와 만든 좋은 함수인지 체크할 수 있도록 합니다

155
00:07:35,210 --> 00:07:40,380
예를 들자면 stdio.h는 클래식한 라이브러리입니다

156
00:07:40,380 --> 00:07:42,450
#include stdio.h를 하면

157
00:07:42,450 --> 00:07:47,330
표준 라이브러리 stdio.h의 printf를 사용할 수 있습니다
<< translated by mki, yeslee, ji-kim, mseo and inyang :) >>
