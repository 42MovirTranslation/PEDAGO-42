1
00:00:05,660 --> 00:00:12,360
이번 비디오에서 라이브러리란 무엇인지와 어떻게 라이브러리를 만드는지에 대해 다뤄봅시다

2
00:00:13,420 --> 00:00:15,440
그럼 라이브러리는 어떤 용도로 사용될까요?

3
00:00:16,160 --> 00:00:18,540
라이브러리의 목적은

4
00:00:19,120 --> 00:00:23,120
여러분이 자주 쓰는 함수들을 모아둘 수 있는 공간을 마련해주는 데에 있습니다

5
00:00:24,410 --> 00:00:31,420
매번 모든 파일을 가지고 다닐 필요가 없어지지요
예를 들자면 여러분이 누군가에게

6
00:00:31,940 --> 00:00:38,740
여러분의 소스 코드를 주지 않고 전달하고자 할 때 도움이 되겠지요
예시로 여러분이 3d 엔진을 샀다고 가정해볼게요

7
00:00:39,320 --> 00:00:44,120
3d 엔진은 사실 여러분들이 사용할 수 있는 함수들이 포함된
라이브러리를 제공하는 겁니다

8
00:00:44,420 --> 00:00:50,050
다만 함수의 소스 코드는 제공되지 않죠, 그냥 기능만 사용할 수 있습니다

9
00:00:50,450 --> 00:00:53,649
그럼 지금부터 여기 있는 두 개의 함수로 작은 라이브러리를 만드는

10
00:00:54,710 --> 00:00:56,630
간단한 방법을 보겠습니다

11
00:00:56,630 --> 00:01:00,609
(화면 참조)

12
00:01:01,280 --> 00:01:09,010
이 두 파일에는 각각 출력을 할 수 있는 함수들이 있고
display_str을 실행하기 위해서는 display_char 파일이 필요합니다

13
00:01:09,830 --> 00:01:20,080
display_str을 사용해서 "Hello World!"를 출력하는

14
00:01:22,159 --> 00:01:24,159
main을 만들어봅시다

15
00:01:28,030 --> 00:01:31,409
만약 이렇게 컴파일을 하려고 하면

16
00:01:32,439 --> 00:01:35,309
display_str이 없기 때문에 오류가 납니다

17
00:01:36,070 --> 00:01:39,539
main.c를 컴파일하기 위해 display_str을

18
00:01:40,479 --> 00:01:42,219
같이 포함해 줍시다

19
00:01:42,220 --> 00:01:47,460
이번에도 컴파일할 수 없네요
display_str을 사용하기 위해서 display_char이 필요합니다

20
00:01:48,000 --> 00:01:52,020
display_char도 함께 포함해 줍시다

21
00:01:52,030 --> 00:01:56,789
여러분도 보셨다시피 훨씬 많은 함수를 불러오는 복잡한 프로그램에서는

22
00:01:57,520 --> 00:02:04,439
필요한 모든 파일을 일일이 입력하는 일이 굉장히 힘들 겁니다

23
00:02:04,869 --> 00:02:10,828
그렇기에 함수를 라이브러리에 넣어 사용한다면 훨씬 실용적이겠죠

24
00:02:11,410 --> 00:02:13,619
그러면 라이브러리를 어떻게 만들 수 있을까요?

25
00:02:14,640 --> 00:02:17,240
라이브러리를 만들려면

26
00:02:17,840 --> 00:02:24,220
.c 파일들을 .o파일로 컴파일해야 합니다

27
00:02:25,600 --> 00:02:33,459
"gcc"에 이렇게 간단히 -c 옵션을 붙이면 이 옵션 덕에
(.o 파일로 컴파일하는 중)

28
00:02:33,459 --> 00:02:40,169
display_char.o가 만들어졌습니다
그리고 라이브러리를 만들어줄 명령어는

29
00:02:40,480 --> 00:02:44,220
.o파일을 이해할 수 있습니다

30
00:02:45,069 --> 00:02:50,789
반면, 우리는 이 파일의 내용을 바로 이해할 수 없습니다
.o파일은 기계어이기 때문입니다, 보시다시피 읽을 수 없습니다

31
00:02:52,060 --> 00:02:55,410
같은 방법으로 display_str.c로 .o 파일을 생성해 보겠습니다

32
00:02:57,180 --> 00:03:02,300
이제 두 개의 .o 파일들이 생겼고 라이브러리를 만들기 위해 필요한 모든 게 갖춰졌습니다

33
00:03:04,640 --> 00:03:07,240
라이브러리를 만들기 위해서는 "ar" 명령어를 사용할 겁니다

34
00:03:07,440 --> 00:03:11,060
"ar" 명령어에 "rc" 옵션을 줌으로써 어떻게 동작하는지 보여드리겠습니다

35
00:03:11,859 --> 00:03:13,630
이어 ar -rc 뒤에

36
00:03:13,630 --> 00:03:15,630
우리가 만들 라이브러리의 이름을 넣어줍니다

37
00:03:15,630 --> 00:03:28,060
이름은 "libstr"이라 하죠, 항상 lib을 앞에 붙여줍시다
이유는 나중에 보여줄 겁니다, 그리고 함수들을 추가해 줍니다

38
00:03:28,060 --> 00:03:34,840
아까 만들었던 .o 파일을 넣어 함수를 추가할 수 있습니다

39
00:03:37,700 --> 00:03:39,700
짜잔

40
00:03:41,080 --> 00:03:43,320
"libstr.a"파일이 만들어졌지만

41
00:03:43,460 --> 00:03:47,920
잘 만들어졌는지, 다른 함수와 컴파일이 잘 되는지 확인해야 합니다

42
00:03:48,340 --> 00:03:52,320
이전에 함수 파일들을 컴파일했던 것처럼요

43
00:03:52,880 --> 00:04:01,360
"main.c"를 사용해서

44
00:04:06,180 --> 00:04:09,800
제가 만든 라이브러리에 플래그를 넣어 같이 컴파일합시다

45
00:04:10,880 --> 00:04:13,780
"-L ." 옵션이 필요하겠네요

46
00:04:14,300 --> 00:04:20,640
"-L ."은 라이브러리가 지금 이 디렉토리에 있다는 뜻입니다
이 옵션으로 라이브러리가 어디 있는지 알려줄 수 있습니다

47
00:04:21,040 --> 00:04:22,400
옵션 "-lstr"은

48
00:04:22,400 -->  00:04:30,230
우리가 라이브러리를 말하는 방식입니다
여기서 "libstr"라는 이름을 붙이는 것이 중요하다는 것을 알 수 있습니다

59
00:04:30,230 --> 00:04:32,860
접두사 "lib"을 앞에 붙여야 컴파일 시에
라이브러리를 잘 찾을 수 있습니다

50
00:04:34,900 --> 00:04:36,900
문제없이 컴파일되었고

51
00:04:37,070 --> 00:04:43,510
같은 결과를 보여줍니다
제가 이전에 .c 파일로 컴파일했던 것과 똑같습니다

52
00:04:44,900 --> 00:04:49,299
오케이, 지금은 두 가지 함수만 포함된 라이브러리를 만들었습니다

53
00:04:49,460 --> 00:04:53,980
하지만 이제는 여러분들이 자주 사용하는 모든 함수를 넣을 수 있습니다

54
00:04:54,200 --> 00:04:59,240
나중에는 꽤 많은 함수를 사용할 거거든요, 사실 gcc는 라이브러리에서

55
00:04:59,420 --> 00:05:04,060
우리가 사용할 함수를 찾기 위해 모든 함수를 탐색하기 때문에 시간이 오래 걸립니다

56
00:05:04,580 --> 00:05:07,200
그래서 우리는 "ranlib"라고 불리는 것을 사용합니다

57
00:05:07,840 --> 00:05:13,200
"ranlib"는 여러분의 라이브러리에 목차를 달아줘서

58
00:05:13,460 --> 00:05:15,940
"gcc"가 목적한 함수를 곧바로 정확하게 찾을 수 있도록 해줍니다

59
00:05:17,540 --> 00:05:19,540
아주 간단하죠

60
00:05:20,080 --> 00:05:25,880
그리고 같은 작업을 반복해도 보시다시피 아무것도 바뀌지 않습니다
컴파일도 제대로 되고 동작도 똑같습니다

61
00:05:26,360 --> 00:05:32,340
라이브러리에는 현재 두 개의 함수밖에 없기 때문에
컴파일 속도에 차이가 그다지 없다는 것을 확인할 수 있습니다

62
00:05:32,660 --> 00:05:35,000
그러나 만약 라이브러리에 매우 많은 함수가 있을 때에는 아주 유용할 겁니다

63
00:05:35,610 --> 00:05:37,610
지금까지가 라이브러리에 대한 모든 내용이었습니다
<< translated by inyang, chelee, mki, yeslee and mseo :) >>
